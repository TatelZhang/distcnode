webpackJsonp([1],{"2laD":function(t,e){t.exports={success:!0,data:[{id:"58ad76db7872ea0864fedfcc",author_id:"51f0f267f4963ade0e08f503",tab:"share",content:'<div class="markdown-text"><p><img src="//dn-cnode.qbox.me/FlwW5i2h_UuKpnBXXvD3AqyrwjHP" alt="untitled4.png"></p>\n<h1>饿了么大前端 Node.js 进阶教程</h1>\n<p>因为 2016 年面试了很多做 Node.js 的同学，发现大部分做 Node 的同学都是前端转过来的，对后端的知识大多一片空白。所以很难招到比较好的 Node.js 服务端程序员（注意，不是全栈）。</p>\n<p>于是出于我们一贯的开源与分享精神，我们筹备了这个名字叫《如何通过饿了么 Node.js 面试》的开源的 Node.js 进阶教程。</p>\n<p>github 仓库地址：<a href="https://github.com/ElemeFE/node-interview">https://github.com/ElemeFE/node-interview</a></p>\n<h3>导读</h3>\n<p>本教程包含 2~3 年经验的 Node.js 服务端需要知道的知识点。</p>\n<p>需要注意的是, 并不适用于零基础的同学, 你需要有一定的 JavaScript/Node.js 基础, 并且有一定的工作经验. 另外本教程的重点更准确的说是服务端基础中 Node.js 程序员需要了解的部分.</p>\n<p>稳重将一些常见的问题划分归类, 每类标明涵盖的一些<code>覆盖点</code>, 并且列举几个<code>常见问题</code>, 通常这些问题都是 2~3 年工作经验需要了解或者面对的. 如果你对某类问题感兴趣, 或者想知道其中列举问题的答案, 可以通过该类下方的 <code>阅读更多</code> 查看更多的内容.</p>\n<p>整体上大纲列举的并不是很全面, 细节上覆盖率不高, 很多讨论只是点到即止, 希望大家带着问题去思考.</p>\n<h2><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/js-basic.md">Js 基础问题</a></h2>\n<blockquote>\n<p>与前端 Js 不同, 后端是直面服务器的, 更加偏向内存方面.</p>\n</blockquote>\n<ul>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/js-basic.md#%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD"><code>[Basic]</code> 类型判断</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/js-basic.md#%E4%BD%9C%E7%94%A8%E5%9F%9F"><code>[Basic]</code> 作用域</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/js-basic.md#%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92"><code>[Basic]</code> 引用传递</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/js-basic.md#%E5%86%85%E5%AD%98%E9%87%8A%E6%94%BE"><code>[Basic]</code> 内存释放</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/js-basic.md#es6-%E6%96%B0%E7%89%B9%E6%80%A7"><code>[Basic]</code> ES6 新特性</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>js 中什么类型是引用传递, 什么类型是值传递? 如何将值类型的变量以引用的方式传递? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/js-basic.md#q-value">[more]</a></li>\n<li>js 中， 0.1 + 0.2 === 0.3 是否为 true ? 在不知道浮点数位数时应该怎样判断两个浮点数之和与第三数是否相等？</li>\n<li>const 定义的 Array 中间元素能否被修改? 如果可以, 那 const 的意义是? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/js-basic.md#q-const">[more]</a></li>\n<li>JavaScript 中不同类型以及不同环境下变量的内存都是何时释放? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/js-basic.md#q-mem">[more]</a></li>\n</ul>\n<p><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/js-basic.md">阅读更多</a></p>\n<h2><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/module.md">模块</a></h2>\n<ul>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/module.md#%E6%A8%A1%E5%9D%97%E6%9C%BA%E5%88%B6"><code>[Basic]</code> 模块机制</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/module.md#%E7%83%AD%E6%9B%B4%E6%96%B0"><code>[Basic]</code> 热更新</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/module.md#%E4%B8%8A%E4%B8%8B%E6%96%87"><code>[Basic]</code> 上下文</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>a.js 和 b.js 两个文件互相 require 是否会死循环? 双方是否能导出变量? 如何从设计上避免这种问题? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/module.md#q-loop">[more]</a></li>\n<li>如果 a.js require 了 b.js, 那么在 b 中定义全局变量 <code>t = 111</code> 能否在 a 中直接打印出来? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/module.md#q-global">[more]</a></li>\n<li>如何在不重启 node 进程的情况下热更新一个 js/json 文件? 这个问题本身是否有问题? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/module.md#q-hot">[more]</a></li>\n</ul>\n<p><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/module.md">阅读更多</a></p>\n<h2><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md">事件/异步</a></h2>\n<ul>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#promise"><code>[Basic]</code> Promise</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#events"><code>[Doc]</code> Events (事件)</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#timers"><code>[Doc]</code> Timers (定时器)</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#%E9%98%BB%E5%A1%9E%E5%BC%82%E6%AD%A5"><code>[Point]</code> 阻塞/异步</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#%E5%B9%B6%E8%A1%8C%E5%B9%B6%E5%8F%91"><code>[Point]</code> 并行/并发</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>Promise 中 .then 的第二参数与 .catch 有什么区别? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#q-1">[more]</a></li>\n<li>Eventemitter 的 emit 是同步还是异步? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#q-2">[more]</a></li>\n<li>如何判断接口是否异步? 是否只要有回调函数就是异步? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#q-3">[more]</a></li>\n<li>nextTick, setTimeout 以及 setImmediate 三者有什么区别? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#q-4">[more]</a></li>\n<li>如何实现一个 sleep 函数? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#q-5">[more]</a></li>\n<li>如何实现一个异步的 reduce? (注:不是异步完了之后同步 reduce) <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md#q-6">[more]</a></li>\n</ul>\n<p><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/event-async.md">阅读更多</a></p>\n<h2><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md">进程</a></h2>\n<ul>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md#process"><code>[Doc]</code> Process (进程)</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md#child-process"><code>[Doc]</code> Child Processes (子进程)</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md#cluster"><code>[Doc]</code> Cluster (集群)</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md#%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1"><code>[Basic]</code> 进程间通信</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md#%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B"><code>[Basic]</code> 守护进程</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>进程的当前工作目录是什么? 有什么作用? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md#q-cwd">[more]</a></li>\n<li>child_process.fork 与 POSIX 的 fork 有什么区别? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md#q-fork">[more]</a></li>\n<li>父进程或子进程的死亡是否会影响对方? 什么是孤儿进程? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md#q-child">[more]</a></li>\n<li>cluster 是如何保证负载均衡的? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md#how-it-works">[more]</a></li>\n<li>什么是守护进程? 如何实现守护进程? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md#%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B">[more]</a></li>\n</ul>\n<p><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/process.md">阅读更多</a></p>\n<h2><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md">IO</a></h2>\n<ul>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#buffer"><code>[Doc]</code> Buffer</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#string-decoder"><code>[Doc]</code> String Decoder (字符串解码)</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#stream"><code>[Doc]</code> Stream (流)</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#console"><code>[Doc]</code> Console (控制台)</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#file"><code>[Doc]</code> File System (文件系统)</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#readline"><code>[Doc]</code> Readline</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#repl"><code>[Doc]</code> REPL</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>Buffer 一般用于处理什么数据? 其长度能否动态变化? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#buffer">[more]</a></li>\n<li>Stream 的 highWaterMark 与 drain 事件是什么? 二者之间的关系是? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#%E7%BC%93%E5%86%B2%E5%8C%BA">[more]</a></li>\n<li>Stream 的 pipe 的作用是? 在 pipe 的过程中数据是引用传递还是拷贝传递? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#pipe">[more]</a></li>\n<li>什么是文件描述符? 输入流/输出流/错误流是什么? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#file">[more]</a></li>\n<li>console.log 是同步还是异步? 如何实现一个 console.log? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#console">[more]</a></li>\n<li>如何同步的获取用户的输入?  <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#%E5%A6%82%E4%BD%95%E5%90%8C%E6%AD%A5%E7%9A%84%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E7%9A%84%E8%BE%93%E5%85%A5">[more]</a></li>\n<li>Readline 是如何实现的? (有思路即可) <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md#readline">[more]</a></li>\n</ul>\n<p><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/io.md">阅读更多</a></p>\n<h2><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md">Network</a></h2>\n<ul>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#net"><code>[Doc]</code> Net (网络)</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#udp"><code>[Doc]</code> UDP/Datagram</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#http"><code>[Doc]</code> HTTP</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#dns"><code>[Doc]</code> DNS (域名服务器)</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#zlib"><code>[Doc]</code> ZLIB (压缩)</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#rpc"><code>[Point]</code> RPC</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>cookie 与 session 的区别? 服务端如何清除 cookie? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#q-cookie-session">[more]</a></li>\n<li>HTTP 协议中的 POST 和 PUT 有什么区别? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#q-post-put">[more]</a></li>\n<li>什么是跨域请求? 如何允许跨域? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#q-cors">[more]</a></li>\n<li>TCP/UDP 的区别? TCP 粘包是怎么回事，如何处理? UDP 有粘包吗? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#q-tcp-udp">[more]</a></li>\n<li><code>TIME_WAIT</code> 是什么情况? 出现过多的 <code>TIME_WAIT</code> 可能是什么原因? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#q-time-wait">[more]</a></li>\n<li>ECONNRESET 是什么错误? 如何复现这个错误?</li>\n<li>socket hang up 是什么意思? 可能在什么情况下出现? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md#socket-hang-up">[more]</a></li>\n<li>hosts 文件是什么? 什么叫 DNS 本地解析?</li>\n<li>列举几个提高网络传输速度的办法?</li>\n</ul>\n<p><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/network.md">阅读更多</a></p>\n<h2><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md">OS</a></h2>\n<ul>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md#tty"><code>[Doc]</code> TTY</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md#os"><code>[Doc]</code> OS (操作系统)</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md#path"><code>[Doc]</code> Path</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0"><code>[Doc]</code> 命令行参数</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md#%E8%B4%9F%E8%BD%BD"><code>[Basic]</code> 负载</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md#checklist"><code>[Point]</code> CheckList</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>什么是 TTY? 如何判断是否处于 TTY 环境? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md#tty">[more]</a></li>\n<li>不同操作系统的换行符 (EOL) 有什么区别? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md#os">[more]</a></li>\n<li>服务器负载是什么概念? 如何查看负载? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md#%E8%B4%9F%E8%BD%BD">[more]</a></li>\n<li>ulimit 是用来干什么的? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md#ulimit">[more]</a></li>\n</ul>\n<p><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/os.md">阅读更多</a></p>\n<h2><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md">错误处理/调试/优化</a></h2>\n<ul>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#errors"><code>[Doc]</code> Errors (异常)</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#domain"><code>[Doc]</code> Domain (域)</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#debugger"><code>[Doc]</code> Debugger (调试器)</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#c-c++-addon"><code>[Doc]</code> C/C++ 插件</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#v8"><code>[Doc]</code> V8</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#%E5%86%85%E5%AD%98%E5%BF%AB%E7%85%A7"><code>[Point]</code> 内存快照</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#cpu-profiling"><code>[Point]</code> CPU profiling</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>怎么处理未预料的出错? 用 try/catch ，domains 还是其它什么? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#q-handle-error">[more]</a></li>\n<li>什么是 <code>uncaughtException</code> 事件? 一般在什么情况下使用该事件? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#uncaughtexception">[more]</a></li>\n<li>domain 的原理是? 为什么要弃用 domain? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#domain">[more]</a></li>\n<li>什么是防御性编程? 与其相对的 let it crash 又是什么?</li>\n<li>为什么要在 cb 的第一参数传 error? 为什么有的 cb 第一个参数不是 error, 例如 http.createServer?</li>\n<li>为什么有些异常没法根据报错信息定位到代码调用? 如何准确的定位一个异常? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#%E9%94%99%E8%AF%AF%E6%A0%88%E4%B8%A2%E5%A4%B1">[more]</a></li>\n<li>内存泄漏通常由哪些原因导致? 如何分析以及定位内存泄漏? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md#%E5%86%85%E5%AD%98%E5%BF%AB%E7%85%A7">[more]</a></li>\n</ul>\n<p><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/error.md">阅读更多</a></p>\n<h2><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md">测试</a></h2>\n<ul>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md#%E6%B5%8B%E8%AF%95%E6%96%B9%E6%B3%95"><code>[Basic]</code> 测试方法</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95"><code>[Basic]</code> 单元测试</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md#%E9%9B%86%E6%88%90%E6%B5%8B%E8%AF%95"><code>[Basic]</code> 集成测试</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md#%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95"><code>[Basic]</code> 基准测试</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md#%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95"><code>[Basic]</code> 压力测试</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md#assert"><code>[Doc]</code> Assert (断言)</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>为什么要写测试? 写测试是否会拖累开发进度?<a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md#q-why-write-test">[more]</a></li>\n<li>单元测试的单元是指什么? 什么是覆盖率?<a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md#%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95">[more]</a></li>\n<li>测试是如何保证业务逻辑中不会出现死循环的?<a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md#q-death-loop">[more]</a></li>\n<li>mock 是什么? 一般在什么情况下 mock?<a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md#mock">[more]</a></li>\n</ul>\n<p><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/test.md">阅读更多</a></p>\n<h2><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/util.md">util</a></h2>\n<ul>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/util.md#url"><code>[Doc]</code> URL</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/util.md#query-strings"><code>[Doc]</code> Query Strings (查询字符串)</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/util.md#util-1"><code>[Doc]</code> Utilities (实用函数)</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/util.md#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F"><code>[Basic]</code> 正则表达式</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>HTTP 如何通过 GET 方法 (URL) 传递 let arr = [1,2,3,4] 给服务器? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/util.md#get-param">[more]</a></li>\n<li>Node.js 中继承 (util.inherits) 的实现? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/util.md#utilinherits">[more]</a></li>\n<li>如何递归获取某个文件夹下所有的文件名? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/util.md#q-traversal">[more]</a></li>\n</ul>\n<p><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/util.md">阅读更多</a></p>\n<h2><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md">存储</a></h2>\n<ul>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md#mysql"><code>[Point]</code> Mysql</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md#mongodb"><code>[Point]</code> Mongodb</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md#replication"><code>[Point]</code> Replication</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md#%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7"><code>[Point]</code> 数据一致性</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md#%E7%BC%93%E5%AD%98"><code>[Point]</code> 缓存</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>备份数据库与 M/S, M/M 等部署方式的区别? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md#replication">[more]</a></li>\n<li>索引有什么用，大致原理是什么? 设计索引有什么注意点? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md#%E7%B4%A2%E5%BC%95">[more]</a></li>\n<li>Monogdb 连接问题(超时/断开等)有可能是什么问题导致的? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md#Mongodb">[more]</a></li>\n<li>什么情况下数据会出现脏数据? 如何避免? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md#%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4%E6%80%A7">[more]</a></li>\n<li>redis 与 memcached 的区别? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md#%E7%BC%93%E5%AD%98">[more]</a></li>\n</ul>\n<p><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/storage.md">阅读更多</a></p>\n<h2><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md">安全</a></h2>\n<ul>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#crypto"><code>[Doc]</code> Crypto (加密)</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#tlsssl"><code>[Doc]</code> TLS/SSL</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#https"><code>[Doc]</code> HTTPS</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#xss"><code>[Point]</code> XSS</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#csrf"><code>[Point]</code> CSRF</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB"><code>[Point]</code> 中间人攻击</a></li>\n<li><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#sqlnosql-%E6%B3%A8%E5%85%A5"><code>[Point]</code> Sql/Nosql 注入</a></li>\n</ul>\n<h3>常见问题</h3>\n<ul>\n<li>加密是如何保证用户密码的安全性? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#crypto">[more]</a></li>\n<li>TLS 与 SSL 有什么区别? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#tlsssl">[more]</a></li>\n<li>HTTPS 能否被劫持? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#https">[more]</a></li>\n<li>XSS 攻击是什么? 有什么危害? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#xss">[more]</a></li>\n<li>过滤 Html 标签能否防止 XSS? 请列举不能的情况? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#xss">[more]</a></li>\n<li>CSRF 是什么? 如何防范? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#csrf">[more]</a></li>\n<li>如何避免中间人攻击? <a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md#%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB">[more]</a></li>\n</ul>\n<p><a href="https://github.com/ElemeFE/node-interview/blob/master/sections/zh-cn/security.md">阅读更多</a></p>\n<h2>最后</h2>\n<p>目前 repo 处于施工现场的情况，如果发现问题欢迎在 <a href="https://github.com/ElemeFE/node-interview/issues">issues</a> 中指出。如果有比较好的<code>问题/知识点/指正</code>，也欢迎提 PR。</p>\n<p>另外关于 <code>Js 基础</code> 是个比较大的话题，在本教程不会很细致深入的讨论，更多的是列出一些重要或者更服务端更相关的地方，所以如果你拿着《JavaScript 权威指南》给教程提 PR 可能不会采纳。本教程的重点更准确的说是服务端基础中 Node.js 程序员需要了解的部分。</p>\n</div>',title:"饿了么大前端 Node.js 进阶教程",last_reply_at:"2017-10-19T02:14:23.838Z",good:!0,top:!0,reply_count:256,visit_count:132782,create_at:"2017-02-22T11:32:43.547Z",author:{loginname:"lellansin",avatar_url:"https://avatars2.githubusercontent.com/u/2081487?v=4&s=120"}},{id:"58eee565a92d341e48cfe7fc",author_id:"54009f5ccd66f2eb37190485",tab:"share",content:'<div class="markdown-text"><h1>2017，我们来聊聊 Node.js</h1>\n<h2>版本帝？</h2>\n<p>Chrome浏览器已经蹦到57版本了，是名副其实的版本帝，作为兄弟的Node.js也一样，1.0之前等了6年，而从1.0到8.0，只用了2年时间，这世界到底怎么了？</p>\n<p>我们就数一下</p>\n<ul>\n<li>从v0.1到0.12用了6年</li>\n<li>2015-01-14发布了v1.0.0版本（io.js）</li>\n<li>2.x（io.js）</li>\n<li>3.x（io.js）</li>\n<li>2015年09月Node.js基金会已发布Node.js V4.0版 与io.js合并后的第一个版本</li>\n<li>2015年10月Node.jsv4.2.0将是首个lts长期支持版本</li>\n<li>2016年底发布到4.2.4 &amp;&amp; 5.4.0</li>\n<li>2016年3月20日v4.4.0 LTS（长期支持版本）和v5.9.0 Stable（稳定版本）</li>\n<li>2016 年底 v6.0 支持95%以上的es6特性 ， v7.0通过flag支持async函数，99%的es6特性</li>\n<li>2017年2月发布v7.6版本，可以不通过flag使用async函数</li>\n</ul>\n<p><img src="//dn-cnode.qbox.me/Fv8fvViUeOJpBlOWYzBo1txRUhdN" alt="lts-schedule.png"></p>\n<p>整体来说趋于稳定</p>\n<ul>\n<li>成立了Node.js基金会，能够让Node.js在未来有更好的开源社区支持</li>\n<li>发布了LTS版本，意味着api稳定</li>\n<li>快速发版本，很多人吐槽这个，其实换个角度看，这也是社区活跃的一个体现，但如果大家真的看CHANGELOG，其实都是小改进，而且是边边角角的改进，也就是说Node.js的core（核心）已经非常稳定了，可以大规模使用</li>\n</ul>\n<h2>已无性能优势？</h2>\n<p>Node.js在2009年横空出世，可以说是纯异步获得高性能的功劳。所有语言几乎没有能够和它相比的，比如Java、PHP、Ruby都被啪啪的打脸。但是山一程，水一程，福祸相依，因为性能太出众，导致很多语言、编程模型上有更多探索，比如go语言产生、php里的swolo和vm改进等，大家似乎都以不支持异步为耻辱。后来的故事大家都知道了，性能都提到非常高，c10问题已经没人再考虑，只是大家实现早晚而产生的性能差距而已。</p>\n<blockquote>\n<p>编程语言的性能趋于一样的极限，所以剩下的选择，只有喜好</p>\n</blockquote>\n<p>那么在这种情况下，Node.js还有优势么？</p>\n<ul>\n<li>实现成本：Node.js除了异步流程控制稍复杂外，其他的都非常简单，比如写法，你可以面向过程、面向对象、函数式，根据自己的解决选择就好了。不要因为它现在变化快，就觉得自己跟不上潮流。尤其是后端程序员转Node.js几乎是2周以内的成本，某些语言光熟悉语法习惯也不止2周吧？</li>\n<li>调优成本：Node.js即使不优化，它的性能也非常好，如果优化，也比其他语言更简单</li>\n<li>学习成本：是否必须用，如果是必须要用，那就少学一样是一样，人生有限，不能都花在写hello world上。我想问，大前端离得开js么？</li>\n</ul>\n<blockquote>\n<p>误读：Node.js已无性能优势，它现在最强大的是基于npm的生态</p>\n</blockquote>\n<p>上面是成本上的比较，其实大家把关注点都转移到基于npm的生态上，截止2017年2月，在npm上有超过45万个模块，秒杀无数。npm是所有的开源的包管理里最强大的，我们说更了不起的Node.js，其实npm居功甚伟，后面会有独立的章节进行阐述。</p>\n<p>来自<a href="http://www.modulecounts.com/">www.modulecounts.com</a>的各个包管理模块梳理的比较</p>\n<p><img src="//dn-cnode.qbox.me/FjmazMxffKETUdl9-NVoSqLB-DyT" alt="Screen Shot 2017-04-04 at 21.02.41.png">\nnpm生态是Node的优势不假，可是说“Node.js没有性能优势”真的对么？这其实就是误读，Node.js的性能依然很好呀，而且它有npm极其强大的生态，可谓性能与生态双剑合璧，你说你死不死？</p>\n<h2>异步和回调地狱？</h2>\n<blockquote>\n<p>天生异步，败也异步，成也异步</p>\n</blockquote>\n<p>正因为异步导致了api设计方式只能采用error-first风格的回调，于是大家硬生生的把callback写成了callback hell。于是各种黑粉就冒出来，无非是一些浅尝辄止之辈。但也正因为回调地狱是最差实践，所以大家才不得不求变，于是thunk、promise等纷沓而至。虽然Promise/A+不完美，但对于解决回调地狱是足够的了。而且随着ES6等规范实现，引入generator、co等，让异步越来越近于同步。当async函数落地的时候，Node已经站在了同C#、Python一样的高度上，大家还有什么理由黑呢？</p>\n<p>本小节先科普一下异步流程里的各种概念，后面会有独立章节进行详细讲解</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>说明</th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>callback</td>\n<td>Node.js API天生就是这样的</td>\n<td></td>\n</tr>\n<tr>\n<td>thunk</td>\n<td>参数的求值策略</td>\n<td></td>\n</tr>\n<tr>\n<td>promise</td>\n<td>最开始是Promise/A+规范，随后成为ES6标准</td>\n<td></td>\n</tr>\n<tr>\n<td>generator</td>\n<td>ES6种的生成器，用于计算，但tj想用做流程控制</td>\n<td></td>\n</tr>\n<tr>\n<td>co</td>\n<td>generator用起来非常麻烦，故而tj写了co这个generator生成器，用法更简单</td>\n<td></td>\n</tr>\n<tr>\n<td>async函数</td>\n<td>原本计划进入es7规范，结果差一点，但好在v8实现了，所以node 7就可以使用，无须等es7规范落地</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>有时，将一件事儿做到极致，也许能有另一种天地</p>\n</blockquote>\n<h2>应用场景</h2>\n<p>MEAN是一个Javascript平台的现代Web开发框架总称，它是MongoDB + Express +AngularJS + NodeJS 四个框架的第一个字母组合。它与传统LAMP一样是一种全套开发工具的简称。在2014和2015年喜欢讲这个，并且还有MEAN.js等框架，但今天已经过时，Node.js有了更多的应用场景。</p>\n<p>《Node.js in action》一书里说，Node所针对的应用程序有一个专门的简称：DIRT。它表示数据密集型实时（data-intensive real-time）程序。因为Node自身在I/O上非常轻量，它善于将数据从一个管道混排或代理到另一个管道上，这能在处理大量请求时持有很多开放的连接，并且只占用一小部分内存。它的设计目标是保证响应能力，跟浏览器一样。</p>\n<p>这话不假，但在今天来看，DIRT还是范围小了。其实DIRT本质上说的I/O处理的都算，但随着大前端的发展，Node.js已经不再只是I/O处理相关，而是更加的“Node”！</p>\n<p>这里给出Node.js的若干使用场景</p>\n<ul>\n<li>网站（如express/koa等）</li>\n<li>im即时聊天(<a href="http://socket.io">socket.io</a>)</li>\n<li>api（移动端，pc，h5）</li>\n<li>HTTP Proxy（淘宝、Qunar、腾讯、百度都有）</li>\n<li>前端构建工具(grunt/gulp/bower/webpack/fis3…)</li>\n<li>写操作系统（NodeOS）</li>\n<li>跨平台打包工具（PC端的electron、nw.js，比如钉钉PC客户端、微信小程序IDE、微信客户端，移动的cordova，即老的Phonegap，还有更加有名的一站式开发框架ionicframework）</li>\n<li>命令行工具（比如cordova、shell.js）</li>\n<li>反向代理（比如anyproxy，node-http-proxy）</li>\n<li>编辑器Atom、VSCode等</li>\n</ul>\n<p>可以说目前大家能够看到的、用到的软件都有Node.js身影，当下最流行的软件写法也大都是基于Node.js的，比如PC客户端<a href="https://github.com/luin/medis">luin/medis</a>采用electron打包，写法采用React+Redux。我自己一直的实践的【Node全栈】，也正是基于这种趋势而形成的。在未来，Node.js的应用场景会更加的广泛。更多参见<a href="https://github.com/sindresorhus/awesome-nodejs">sindresorhus/awesome-nodejs</a>。</p>\n<h3>Web框架</h3>\n<p>演进时间线大致如下：</p>\n<ul>\n<li>2010年tj写的Express</li>\n<li>2011年Derby.js开始开发，8月5日，WalmartLabs的一位成员Eran Hammer提交了Hapi的第一次commit。Hapi原本是Postmile的一部分，并且最开始是基于Express构建的。后来它发展成自己自己的框架，</li>\n<li>2012年1月21日，专注于rest api的restify发布1.0版本，同构的meteor开始投入开发，最像rails的sails也开始了开发</li>\n<li>2013年tj开始玩generator，编写co这个generator执行器，并开始了Koa。2013 年下半年李成银开始ThinkJS，参考ThinkPHP</li>\n<li>2014年，4月9日，express发布4.0，进入4.x时代持续到今天，MEAN.js开始随着MEAN架构的提出开始开发，意图大一统，另外total.js开始，最像PHP’s Laravel 或 Python’s Django 或 <a href="http://ASP.NET">ASP.NET</a> MVC的框架</li>\n<li>2015年8月22日， 下一代Web框架Koa发布1.0，可以在node 0.12下面，通过co + generator实现同步逻辑，那时候co还是基于thunkfy的，2015.10.30 ThinkJS发布了Es2015+ 特性开发的v 2.0版本</li>\n<li>2016 年 09 月，蚂蚁金服的eggjs，在 JSConf China 2016 上亮相并宣布开源</li>\n<li>2017年2月，下一代Web框架Koa发布2.0</li>\n</ul>\n<p>我们可以根据框架的特性进行分类</p>\n<table>\n<thead>\n<tr>\n<th>框架名称</th>\n<th>特性</th>\n<th>点评</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Express</td>\n<td>简单、实用，路由中间件等五脏俱全</td>\n<td>最著名的Web框架</td>\n</tr>\n<tr>\n<td>Derby.js &amp;&amp; Meteor</td>\n<td>同构</td>\n<td>前后端都放到一起，模糊了开发便捷，看上去更简单，实际上上对开发来说要求更高</td>\n</tr>\n<tr>\n<td>Sails、Total</td>\n<td>面向其他语言，Ruby、PHP等</td>\n<td>借鉴业界优秀实现，也是Node.js成熟的一个标志</td>\n</tr>\n<tr>\n<td>MEAN.js</td>\n<td>面向架构</td>\n<td>类似于脚手架，又期望同构，结果只是蹭了热点</td>\n</tr>\n<tr>\n<td>Hapi和Restfy</td>\n<td>面向Api &amp;&amp; 微服务</td>\n<td>移动互联网时代Api的作用被放大，故而独立分类。尤其是对于微服务开发更是利器</td>\n</tr>\n<tr>\n<td>ThinkJS</td>\n<td>面向新特性</td>\n<td>借鉴ThinkPHP，并慢慢走出自己的一条路，对于Async函数等新特性支持，无出其右</td>\n</tr>\n<tr>\n<td>Koa</td>\n<td>专注于异步流程改进</td>\n<td>下一代Web框架</td>\n</tr>\n</tbody>\n</table>\n<p>对于框架选型</p>\n<ul>\n<li>业务场景、特点，不必为了什么而什么，避免本末倒置</li>\n<li>自身团队能力、喜好，有时候技术选型决定团队氛围的，需要平衡激进与稳定</li>\n<li>出现问题的时候，有人能Cover的住，Node.js虽然8年历史，但模块完善程度良莠不齐，如果不慎踩到一个坑里，需要团队在无外力的情况能够搞定，否则会影响进度</li>\n</ul>\n<blockquote>\n<p>个人学习求新，企业架构求稳，无非喜好与场景而已</p>\n</blockquote>\n<p>我猜大家能够想到的场景，大约如下</p>\n<ul>\n<li>前端工具，比如gulp、grunt、webpack等</li>\n<li>服务器，做类似于Java、PHP的事儿</li>\n</ul>\n<p>如果只是做这些，和Java、PHP等就没啥区别了。如果再冠上更了不起的Node.js，就有点名不符实了。所以这里我稍加整理，看看和大家想的是否一样</p>\n<h3>技术栈演进</h3>\n<p>自从ES 2015（俗称ES 6）在Node.js 落地之后，整个Node.js开发都发生了翻天覆地的变化。自从0.10开始，Node.js就逐渐的加入了ES 6特性，比如0.12就可以使用generator，才导致寻求异步流程控制的tj写出了co这个著名的模块，继而诞生了Koa框架。但是在4.0之前，一直都是要通过flag才能开启generator支持，故而Koa 1.0迟迟未发布，在Node 4.0发布才发布的Koa 1.0。</p>\n<blockquote>\n<p>2015年，成熟的传统，而2016年，变革开始</p>\n</blockquote>\n<p>核心变更：es语法支持</p>\n<ul>\n<li>使用Node.js 4.x或5.x里的es6特性，如果想玩更高级的，可以使用<a href>babel</a>编译支持es7特性，或者typescript</li>\n<li>合理使用<a href="https://github.com/feross/standard">standard</a>  或者 xo 代码风格约定</li>\n<li>适当的引入ES 6语法，只要Node.js SDK支持的，都可以使用</li>\n<li>需要大家重视OO（面向对象）写法的学习和使用，虽然ES 6的OO机制不健全，但这是大方向，以后会一直增强。OO对于大型软件开发更好。这其实也是我看好typescript的原因。</li>\n</ul>\n<p>对比一下变革前后的技术栈选型，希望读者能够从中感受到其中的变化</p>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>2015年</th>\n<th>2016年</th>\n<th>选型原因</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Web框架</td>\n<td>express 4.x</td>\n<td>koa 1.0 &amp;&amp; 2.0 （koa2.0刚发布不久，喜欢折腾的可以考虑）</td>\n<td>主要在流程控制上的便利，异步毕竟要时刻注意，心累</td>\n</tr>\n<tr>\n<td>数据库</td>\n<td>mongoose（mongodb）</td>\n<td>mongoose（mongodb）</td>\n<td>对mongodb和mysql支持都一样，不过是mongodb更简单，足以应付绝大部分场景</td>\n</tr>\n<tr>\n<td>异步流程控制</td>\n<td>bluebird（Promise/A+实现）</td>\n<td>bluebird（Promise/A+实现）1） Koa 1.0 使用co + generator 2） Koa 2.0 使用async函数</td>\n<td>流程控制演进路线，从promise到async函数，无论如何，promise都是基石，必要掌握的</td>\n</tr>\n<tr>\n<td>模板引擎（视图层）</td>\n<td>ejs &amp;&amp; jade</td>\n<td>jade &amp;&amp; nunjucks</td>\n<td>给出了2种，一种可读性好，另一种简洁高效，都是非常好的</td>\n</tr>\n<tr>\n<td>测试</td>\n<td>mocha</td>\n<td>ava</td>\n<td>mocha是Node.js里著名的测试框架，但对新特性的支持没有ava那么好，而ava基于babel安装也要大上好多</td>\n</tr>\n<tr>\n<td>调试</td>\n<td>node-inspector</td>\n<td>VSCode</td>\n<td>在Node 6和7出来之后，node-inspector支持的不是那么好，相反VSCode可视化，简单，文件多时也不卡，特别好用</td>\n</tr>\n</tbody>\n</table>\n<h3>预处理器</h3>\n<p>前端预处理可分3种</p>\n<ul>\n<li>模板引擎</li>\n<li>css预处理器</li>\n<li>js友好语言</li>\n</ul>\n<p>这些都离不开Node.js的支持，对于前端工程师来说，使用Node.js来实现这些是最方便不过的。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>实现</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>模板引擎</td>\n<td>art\\mustache\\ejs\\hbs\\jade …</td>\n<td>上百种之多，自定义默认，编译成html，继而完成更多操作</td>\n</tr>\n<tr>\n<td>css预处理器</td>\n<td>less\\sass\\scss\\rework\\postcss</td>\n<td>自定义语法规则，编译成css</td>\n</tr>\n<tr>\n<td>js友好语言</td>\n<td>coffeescript、typescript</td>\n<td>自定义语法规则、编译成js</td>\n</tr>\n</tbody>\n</table>\n<h3>跨平台</h3>\n<p>跨平台指的是PC端、移动端、Web/H5</p>\n<table>\n<thead>\n<tr>\n<th>平台</th>\n<th>实现</th>\n<th>点评</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Web/H5</td>\n<td>纯前端</td>\n<td>不必解释</td>\n</tr>\n<tr>\n<td>PC客户端</td>\n<td>nw.js和electron</td>\n<td>尤其是atom和vscode编辑器最为著名，像钉钉PC端，微信客户端、微信小程序IDE等都是这样的，通过web技术来打包成PC客户端</td>\n</tr>\n<tr>\n<td>移动端</td>\n<td>cordova（旧称PhoneGap），基于cordova的ionicframework</td>\n<td>这种采用h5开发，打包成ipa或apk的应用，称为Hybrid开发（混搭），通过webview实现所谓的跨平台，应用的还是非常广泛的</td>\n</tr>\n</tbody>\n</table>\n<h3>构建工具</h3>\n<p>说起构建工具，大概会想到make、ant、rake、gradle等，其实Node.js里有更多实现</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>介绍</th>\n<th>点评</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>jake</td>\n<td>基于coffeescript的大概都熟悉这个，和make、rake类似</td>\n<td>经典传统</td>\n</tr>\n<tr>\n<td>grunt</td>\n<td>dsl风格的早期著名框架</td>\n<td>配置非常麻烦</td>\n</tr>\n<tr>\n<td>gulp</td>\n<td>流式构建，不会产生中间文件，利用Stream机制，处理大文件和内存有优势，配置简单，只有懂点js就能搞定</td>\n<td>grunt的替代品</td>\n</tr>\n<tr>\n<td>webpack + npm scripts</td>\n<td>说是构建工具有点过，但二者组合勉强算吧，loader和plugin机制还是非常强大的</td>\n<td>流行而已</td>\n</tr>\n</tbody>\n</table>\n<p>构建工具都不会特别复杂，所以Node.js世界里有非常多的实现，还有人写过node版本的make呢，玩的很嗨</p>\n<h3>HTTP Proxy</h3>\n<ul>\n<li>请求代理</li>\n<li>SSR &amp;&amp; PWA</li>\n<li>Api Proxy</li>\n</ul>\n<p>1）请求代理</p>\n<p>对于http请求复杂定制的时候，你是需要让Node.js来帮你的，比如为了兼容一个历史遗留需求，在访问某个CSS的时候必须提供HEADER才可以，如果放到静态server或cdn上是做不到的。</p>\n<p>2）SSR &amp;&amp; PWA</p>\n<p>SSR是服务器端渲染，PWA是渐进式Web应用，都是今年最火的技术。如果大家用过，一定对Node.js不陌生。比如React、Vuejs都是Node.js实现的ssr。至于pwa的service-worker也是Node.js实现的。那么为啥不用其他语言实现呢？不是其他语言不能实现，而是使用Node.js简单、方便、学习成本低，轻松获得高性能，如果用其他语言，我至少还得装环境</p>\n<p>3）Api Proxy</p>\n<p>产品需要应变，后端不好变，一变就要设计到数据库、存储等，可能引发事故。而在前端相对更容易，前端只负责组装服务，而非真正对数据库进行变动，所以只要服务api粒度合适，在前端来处理是更好的。</p>\n<p>Api的问题</p>\n<ul>\n<li>一个页面的Api非常多</li>\n<li>跨域，Api转发</li>\n<li>Api返回的数据对前端不友好，后端讨厌（应付）前端，几种api都懒得根据ui/ue去定制，能偷懒就偷懒</li>\n<li>需求决定Api，Api不一定给的及时</li>\n</ul>\n<p>所以，在前端渲染之余，加一层Api Proxy是非常必要的。淘宝早起曾公开过一张架构图，在今天看来，依然不过时</p>\n<p><img src="//dn-cnode.qbox.me/Fr8cGvus0i58atULAnoe-Cv4nu5m" alt="taobao.jpg"></p>\n<ul>\n<li>左侧半边，浏览器和Node.js Server通信可以有多种协议，HTML、RESTfull、BigPipe、Comet、Socket等，已经足够我们完成任何想做的事儿了</li>\n<li>右侧半边，是Node.js实现的WebServer，Node服务分了2个部分\n<ul>\n<li>常规的Http服务，即大块部分二</li>\n<li>ModelProxy指的是根据Server端的服务，组成并转化成自身的Model层。磨蹭用于为Http服务提供更好的接口</li>\n</ul>\n</li>\n</ul>\n<p>这里的Model Proxy其实就是我们所说的Api Proxy，这张图里只是说了结果，把聚合的服务转成模型，继而为HTTP服务提供Api。</p>\n<p>下面我们再深化一下Api Proxy的概念</p>\n<p><img src="//dn-cnode.qbox.me/FpAZo4aPQysJyciBvzUCU9uxb-vf" alt="proxy.png"></p>\n<p>这里的Node Proxy做了2件事儿，Api和渲染辅助。</p>\n<ul>\n<li>前端的异步ajax请求，可以直接访问Api</li>\n<li>如果是直接渲染或者bigpipe等协议的，需要在服务器端组装api，然后再返回给浏览器。</li>\n</ul>\n<p>所以Api后面还有一个服务组装，在微服务架构流行的今天，这种服务组装放到Node Proxy里的好处尤其明显。既可以提高前端开发效率，又可以让后端更加专注于服务开发。甚至如果前端团队足够大，可以在前端建一个Api小组，专门做服务集成的事儿。</p>\n<h3>Api服务</h3>\n<p>说完了Proxy，我们再看看利益问题。Node.js向后端延伸，必然会触动后端开发的利益。那么Proxy层的事儿，前后端矛盾的交界处，后端不想变，前端又求变，那么长此以往，Api接口会变得越来越恶心。后端是愿意把Api的事儿叫前端的，对后端来说，只要你不动我的数据库和服务就可以。</p>\n<p>但是Node.js能不能做这部分呢？答案是能的 ，这个是和Java、PHP类似的，一般是和数据库连接到一起，处理带有业务逻辑的。目前国内大部分都是以Java、PHP等为主，所以要想吃到这部分并不容易。</p>\n<ul>\n<li>小公司，创业公司，新孵化的项目更倾向于Node.js，简单，快速，高效</li>\n<li>微服务架构下的某些服务，使用Node.js开发，是比较合理的</li>\n</ul>\n<p>国内这部分一直没有做的很好，所以Node.js在大公司还没有很好的被应用，安全问题、生态问题、历史遗留问题等，还有很多人对Node.js的误解</p>\n<ul>\n<li>单线程很脆弱，这是事实，但单线程不等于不能多核并发，而且你还有集群呢</li>\n<li>运维，其实很简单，比其他语言之简单，日志采集、监控也非常简单</li>\n<li>模块稳定性，对于Mongodb、MySQL、Redis等还是相当不错，但其他的数据库支持可能没那么好。</li>\n<li>安全问题，</li>\n</ul>\n<p>这些对于提供Api服务来说已经足够了。</p>\n<h3>其他</h3>\n<table>\n<thead>\n<tr>\n<th>用途</th>\n<th>说明</th>\n<th>前景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>爬虫</td>\n<td>抢了不少Python的份额，整体来说简单，实用</td>\n<td>看涨</td>\n</tr>\n<tr>\n<td>命令行工具</td>\n<td>写工具、提高效率，node+npm真是无出其右</td>\n<td>看涨</td>\n</tr>\n<tr>\n<td>微服务与RPC</td>\n<td>Node做纯后端不好做，但在新项目和微服务架构下，必有一席之地</td>\n<td>看涨</td>\n</tr>\n<tr>\n<td>微信公众号开发</td>\n<td>已经火了2年多了，尤其是付费阅读领域，还会继续火下去，gitchat就是使用Node.js做的，而且还在招人</td>\n<td>看涨</td>\n</tr>\n<tr>\n<td>反向代理</td>\n<td>Node.js可以作为nginx这样的反向代理，虽然线上我们很少这样做，但它确确实实可以这样做。比如node-http-proxy和anyproxy等，其实使用Node.js做这种请求转发是非常简单的</td>\n<td>看涨</td>\n</tr>\n</tbody>\n</table>\n<h2>更好的写法</h2>\n<h3>Async函数与Promise</h3>\n<ul>\n<li>Async函数是趋势，Chrome 52. v8 5.1已经支持Async函数(<a href="https://github.com/nodejs/CTC/issues/7">https://github.com/nodejs/CTC/issues/7</a>)了，Node.js 7.0+支持还会远么？</li>\n<li>Async和Generator函数里都支持promise，所以promise是必须会的。</li>\n<li>Generator和yield异常强大，不过不会成为主流，所以学会基本用法和promise就好了，没必要所有的都必须会。</li>\n<li>co作为Generator执行器是不错的，它更好的是当做Promise 包装器，通过Generator支持yieldable，最后返回Promise，是不是有点无耻？</li>\n</ul>\n<p>我整理了一张图，更直观一些。</p>\n<p><img src="//dn-cnode.qbox.me/FkcPwxdGHSCHFvA2nU0ub0zYNRt4" alt="async-all.png"></p>\n<ul>\n<li>红色代表Promise，是使用最多的，无论async还是generator都可用</li>\n<li>蓝色是Generator，过度货</li>\n<li>绿色是Async函数，趋势</li>\n</ul>\n<p><strong>结论</strong>：Promise是必须会的，那你为什么不顺势而为呢？</p>\n<p><strong>推荐</strong>：使用Async函数 + Promise组合，如下图所示。</p>\n<p><img src="//dn-cnode.qbox.me/FhVQF1FKB6sNkoFTc3gU-SVnkGtm" alt="async-suggest.png"></p>\n<p><strong>实践</strong></p>\n<p>合理的结合Promise和Async函数是可以非常高效的，但也要因场景而异</p>\n<ul>\n<li>Promise更容易做promisefyAll（比如使用bluebird）</li>\n<li>Async函数无法批量操作</li>\n</ul>\n<p>那么，在常见的Web应用里，我们总结的实践是，dao层使用Promise比较好，而service层，使用Async/Await更好。</p>\n<p>dao层使用Promise：</p>\n<ul>\n<li>crud</li>\n<li>单一模型的方法多</li>\n<li>库自身支持Promise</li>\n</ul>\n<p>这种用promisefyAll基本几行代码就够了，一般单一模型的操作，不会特别复杂，应变的需求基本不大。</p>\n<p>而service层一般是多个Model组合操作，多模型操作就可以拆分成多个小的操作，然后使用Await来组合，看起来会更加清晰，另外对需求应变也是非常容易的。</p>\n<h3>ES.next</h3>\n<blockquote>\n<p>Node.js + ES.next = ♥</p>\n</blockquote>\n<h3>Flow &amp;&amp; TypeScript</h3>\n<blockquote>\n<p>Type Systems Will Make You a Better JavaScript Developer</p>\n</blockquote>\n<h3>ES6模块</h3>\n<p>现在ES6自带了模块标准， 也是JS第一次支持module（之前的CommonJS、AMD、CMD都不算）， 但目前的所有Node.js版本都没有支持，目前只能用用Traceur、BabelJS， 或者TypeScript把ES6代码转化为兼容ES5版本的js代码，ES6模块新特性非常吸引人，下面简要说明。</p>\n<p>ES6 模块的目标是创建一个同时兼容CommonJS和AMD的格式，语法更加紧凑，通过编译时加载，使得编译时就能确定模块的依赖关系，效率要比 CommonJS 模块的加载方式高。而对于异步加载和配置模块加载方面，则借鉴AMD规范，其效率、灵活程度都远远好于CommonJS写法。</p>\n<ul>\n<li>语法更紧凑</li>\n<li>结构更适于静态编译（比如静态类型检查，优化等）</li>\n<li>对于循环引用支持更好</li>\n</ul>\n<p>ES6 模块标准只有2部分，它的用法更简单，你根本不需要关注实现细节:</p>\n<ul>\n<li>声明式语法：模块导入import、导出export，没有require了</li>\n<li>程式化加载API：可以配置模块是如何加载，以及按需加载。</li>\n</ul>\n<h3>多模块管理器：Lerna</h3>\n<blockquote>\n<p>A tool for managing JavaScript projects with multiple packages.</p>\n</blockquote>\n<p><a href="https://lernajs.io/">https://lernajs.io/</a></p>\n<p>在设计框架的时候，经常做的事儿是进行模块拆分，继而提供插件或集成机制，这样是非常好的做法。但问题也随之而来，当你的模块模块非常多时，你该如何管理你的模块呢？</p>\n<ul>\n<li>法1：每个模块都建立独立的仓库</li>\n<li>法2：所有模块都放到1个仓库里</li>\n</ul>\n<p>法1虽然看起来干净，但模块多时，依赖安装，不同版本兼容等，会导致模块间依赖混乱，出现非常多的重复依赖，极其容易造成版本问题。这时法2就显得更加有效，对于测试，代码管理，发布等，都可以做到更好的支持。</p>\n<p>Lerna就是基于这种初衷而产生的专门用于管理Node.js多模块的工具，当然，前提是你有很多模块需要管理。</p>\n<p>你可以通过npm全局模块来安装Lerna，官方推荐直接使用Lerna 2.x版本</p>\n<h3>更好的NPM替代品：Yarn</h3>\n<p>Yarn是开源JavaScript包管理器，由于npm在扩展内部使用时遇到了大小、性能和安全等问题，Facebook携手来自Exponent、Google和Tilde的工程师，在大型JavaScript框架上打造和测试了Yarn，以便其尽可能适用于多人开发。Yarn承诺比各大流行npm包的安装更可靠，且速度更快。根据你所选的工作包的不同，Yarn可以将安装时间从数分钟减少至几秒钟。Yarn还兼容npm注册表，但包安装方法有所区别。其使用了lockfiles和一个决定性安装算法，能够为参与一个项目的所有用户维持相同的节点模块（node_modules）目录结构，有助于减少难以追踪的bug和在多台机器上复制。</p>\n<p>Yarn还致力于让安装更快速可靠，支持缓存下载的每一个包和并行操作，允许在没有互联网连接的情况下安装（如果此前有安装过的话）。此外，Yarn承诺同时兼容npm和Bower工作流，让你限制安装模块的授权许可。</p>\n<p>2016年10月份, Yarn在横空出世不到一周的时间里，github上的star数已经过万，可以看出大厂及社区的活跃度，以及解决问题的诚意，大概无出其右了！</p>\n<p>替换的原因</p>\n<ul>\n<li>在Facebook的大规模 npm 都工作的不太好</li>\n<li>npm拖慢了公司的ci工作流</li>\n<li>对一个检查所有的模块也是相当低效的</li>\n<li>npm被设计为是不确定性的，而Facebook工程师需要为他们的DevOps工作流提供一直和可依赖的系统</li>\n</ul>\n<p>与hack npm限制的做法相反，Facebook编写了Yarn</p>\n<ul>\n<li>Yarn 的本地缓存文件做的更好</li>\n<li>Yarn 可以并行它的一些操作，这加速了对新模块的安装处理</li>\n<li>Yarn 使用lockfiles，并用确定的算法来创建一个所有跨机器上都一样的文件</li>\n<li>出于安全考虑，在安装进程里，Yarn 不允许编写包的开发者去执行其他代码</li>\n</ul>\n<blockquote>\n<p>Yarn, which promises to even give developers that don’t work at Facebook’s scale a major performance boost, still uses the npm registry and is essentially a drop-in replacement for the npm client.</p>\n</blockquote>\n<p>很多人说和ruby的gem机制类似，都生成lockfile。确实是一个很不错的改进，在速度上有很大改进，配置cnpm等国内源来用，还是相当爽的。</p>\n<h3>友好语言</h3>\n<ul>\n<li>过气的Coffeescript，不多说</li>\n<li><a href="https://babeljs.io/">Babel</a> - also an ES6 to ES5 transpiler that’s growing in popularity possibly because it also supports React’s JSX syntax. As of today it supports the most ES6 features at a somewhat respectable 73%.</li>\n<li><a href="http://www.typescriptlang.org/">TypeScript</a> - a typed superset of JavaScript that not only compiles ES6 to ES5 (or even ES3) but also supports optional variable typing. TypeScript only supports 53% of ES6 features.</li>\n</ul>\n<h2>总结</h2>\n<blockquote>\n<p>坦诚的力量是无穷的</p>\n</blockquote>\n<p>Node.js是为异步而生的，它自己把复杂的事儿做了（高并发，低延时），交给用户的只是有点难用的Callback写法。也正是坦诚的将异步回调暴露出来，才有更好的流程控制方面的演进。也正是这些演进，让Node.js从DIRT（数据敏感实时应用）扩展到更多的应用场景，今天的Node.js已经不只是能写后端的JavaScript，已经涵盖了所有涉及到开发的各个方面，而Node全栈更是热门种的热门。</p>\n<p>直面问题才能有更好的解决方式，Node.js你值得拥有！</p>\n</div>',title:"2017，我们来聊聊 Node.js",last_reply_at:"2017-10-19T02:05:49.155Z",good:!0,top:!0,reply_count:156,visit_count:64895,create_at:"2017-04-13T02:41:41.818Z",author:{loginname:"i5ting",avatar_url:"https://avatars3.githubusercontent.com/u/3118295?v=4&s=120"}},{id:"592917b59e32cc84569a7458",author_id:"54009f5ccd66f2eb37190485",tab:"share",content:'<div class="markdown-text"><p>本来提供开发api，目的是为了开发第三方应用或客户端，如果大家用来学习也是好的，但现在很多人太过分了，随意发帖，at，严重影响了社区的用户，故而决定开始严查</p>\n<p>以下情况，直接封号</p>\n<ul>\n<li>测试标题</li>\n<li>无任何内容</li>\n<li>无意义回复</li>\n<li>测试帖，5分钟内没有删除</li>\n</ul>\n<p>欢迎大家监督</p>\n<p>封号</p>\n<ul>\n<li><a href="https://cnodejs.org/user/Mwangzhi">https://cnodejs.org/user/Mwangzhi</a></li>\n<li><a href="https://cnodejs.org/user/lw6395">https://cnodejs.org/user/lw6395</a></li>\n<li><a href="https://cnodejs.org/user/shengliang74">https://cnodejs.org/user/shengliang74</a>  竟然挑衅，发帖说你来打我呀。。。。</li>\n<li><a href="https://cnodejs.org/user/h5-17">https://cnodejs.org/user/h5-17</a> <a href="/user/h5-17">@h5-17</a></li>\n<li><a href="https://cnodejs.org/user/592php">https://cnodejs.org/user/592php</a> <a href="/user/592php">@592php</a></li>\n</ul>\n<hr>\n<p>20170601更新</p>\n<p><a href="https://cnodejs.org/?tab=dev">https://cnodejs.org/?tab=dev</a>  目前开了一个『客户端测试』专区，以后开发新客户端的同学，帖子直接发到这个专区去。tab 的值是 dev。</p>\n<p><img src="//dn-cnode.qbox.me/FundjyBuYk60yqQ-PdKstrPKY-7-" alt="image.png"></p>\n</div>',title:"测试请发到客户端测试专区，违规影响用户的，直接封号",last_reply_at:"2017-10-19T01:55:48.639Z",good:!1,top:!0,reply_count:109,visit_count:23796,create_at:"2017-05-27T06:07:49.278Z",author:{loginname:"i5ting",avatar_url:"https://avatars3.githubusercontent.com/u/3118295?v=4&s=120"}},{id:"59decbc461932717683d226c",author_id:"55895f5001d3ce0d73d69133",tab:"share",content:'<div class="markdown-text"><p><img src="//dn-cnode.qbox.me/FitFsUGUKvy8rnoRWjjXYe0NRo1_" alt="640.jpg"></p>\n<p>我们不仅仅是开发者，也是维护者。</p>\n<p>Node 地下铁已经举办了四期，在不同的领域，我们进行了不少话题选择，而这次，我们的话题是“Ops First（可运维优先）”。</p>\n<p>谈起运维，我们自然都不陌生，它本身是一种职业，更是一种操守，一种负责任的态度，它讲究的不是说将自己的应用变的最好，而是如何稳定，可持续的维护下去。这种态度取决于使用何种方式来做，现有的 Node.js 体系下，我们已经有了一些方案，比如业界的各种集成平台，比如 Alinode，oneAPM 等，也有新兴的自建项目，致力于帮助开发者更好的掌控自己的应用，这些工具或多或少的在帮助应用的运维之路上提供了力所能及的帮助。</p>\n<p>了解并掌握这些工具，熟悉并对应用更有想法，这是在我看来，对维护，开发应用最好的诠释，也是对应用本身的未来，乃至未来接手的一系列维护者最好的礼物了。</p>\n<p>这次我们不一定聊到工具本身，工具只是载体，底层的数据采集，数据链路，数据分析，数据约定等等，每一项都是一门深奥的学问，每一个善于发现美的开发者一定会有自己独到的理解，会从中剖析出适合自己应用的方式，我们希望的，并不只是将工具拿回去应用，更希望能够让大家了解，为什么工具会这么做，应用如何变得更好，更稳定。</p>\n<p>我们挑选了五位嘉宾，跟着大家，一起聊聊将应用变的更好的故事，也期待着大家一起来书写，属于自己的故事。</p>\n<p>十月底，在北京，我们不见不散。</p>\n<p>时间：17-10-28（周六）13:30\n地点：北京·望京东园四区 9 号楼绿地中心 C 座 5F-14 岳麓书院</p>\n<p>话题：</p>\n<p>1、Open-Falcon 在运维场景的应用、接入及社区生态\n2、构建易于运维的 Node.js 后端\n3、ThinkJS 3 的设计与运维\n4、未来从应用启动开始\n5、Web Assembly 在 Node.js 中的最佳实践</p>\n<p>在话题结束后，我们会有一个关于 Ops First 的圆桌讨论，希望大家可以多多交流。</p>\n<p>大家赶紧报名吧。<a href="https://survey.alibaba.com/survey/A0QcwiwDR">https://survey.alibaba.com/survey/A0QcwiwDR</a></p>\n<p>PS：场地有限，报名表单中对于 Ops First 话题提出独到见解和问题的同学优先通过。</p>\n</div>',title:"「Ops First」 - Node 地下铁第五期线下沙龙邀约",last_reply_at:"2017-10-19T01:24:21.174Z",good:!1,top:!0,reply_count:19,visit_count:2401,create_at:"2017-10-12T01:56:20.451Z",author:{loginname:"hustxiaoc",avatar_url:"https://avatars3.githubusercontent.com/u/1102038?v=4&s=120"}},{id:"59d923b1eab6a6536873ff06",author_id:"5909444b782dbc4b183ecfe2",tab:"ask",content:'<div class="markdown-text"><p>该搜的已经搜了…</p>\n<p>看着我半夜发帖的份上…</p>\n<p>大大们帮助下哈？</p>\n</div>',title:"求一个离线的图片验证码识别模块，不是某某云识别的SDK",last_reply_at:"2017-10-19T02:34:17.638Z",good:!1,top:!1,reply_count:8,visit_count:270,create_at:"2017-10-07T18:57:53.110Z",author:{loginname:"axetroy",avatar_url:"https://avatars2.githubusercontent.com/u/9758711?v=4&s=120"}},{id:"59e80a297675e3bc36f77c57",author_id:"59a6b1f66c90694908d81520",tab:"ask",content:'<div class="markdown-text"><p><img src="//dn-cnode.qbox.me/FpUVMwapGZ9vT11BGMasogfRTnaW" alt="image.png"></p>\n</div>',title:"淘宝镜像也安装不了node-sass模块了",last_reply_at:"2017-10-19T02:12:57.186Z",good:!1,top:!1,reply_count:0,visit_count:37,create_at:"2017-10-19T02:12:57.185Z",author:{loginname:"dolphinfine",avatar_url:"https://avatars1.githubusercontent.com/u/27426130?v=4&s=120"}},{id:"59dca3a261932717683d21fc",author_id:"593d51ee8ce045ee166a1417",tab:"share",content:'<div class="markdown-text"><p>仿coco点餐系统的微信小程序 （后台部分本来用的egg.js,为了能让大家下载之后直接跑起来 就换成了easymock） 仅供交流学习使用,使用之前微信小程序调试工具前要设置不进行域名验证 （欢迎大家指教qq：3471633742）下面是6张效果图，可以下载下来跑跑  github地址:<img src="https://github.com/lpbird/imitate-coco-xcx" alt="git地址"><a href="https://github.com/lpbird/imitate-coco-xcx">https://github.com/lpbird/imitate-coco-xcx</a><img src="//dn-cnode.qbox.me/Fk76a0jhwlqx67iAWKmwkdA6uXKP" alt="1.png"><img src="//dn-cnode.qbox.me/FrfzK8OK-7eCaE9u3QKyXIEpg4C0" alt="2.png"><img src="//dn-cnode.qbox.me/FrzNcaUjseUxZaUiQyZGzKQ-pNtv" alt="3.png"><img src="//dn-cnode.qbox.me/FlfpaptaXosZ4gPUjvr8SnqeLlPN" alt="4.png"><img src="//dn-cnode.qbox.me/Fg9hyi6Nj3Q6x5sL65szU7bp8zii" alt="5.png"><img src="//dn-cnode.qbox.me/FiRna-k2sWvlAwjP_jKstH7avhOQ" alt="6.png"></p>\n</div>',title:"分享微信小程序干货：模仿coco的微信点餐系统",last_reply_at:"2017-10-19T01:50:54.391Z",good:!1,top:!1,reply_count:6,visit_count:709,create_at:"2017-10-10T10:40:34.976Z",author:{loginname:"lpbird",avatar_url:"https://avatars1.githubusercontent.com/u/26104624?v=4&s=120"}},{id:"59e8003fa9a1e19f3634c80f",author_id:"59603478a4de5625080fe1cd",tab:"ask",content:'<div class="markdown-text"><p>$(“div”).click(function(){\n$.ajax({\ntype:‘GET’,\nurl:‘已写好’,\nsueecss: function(res){\nwx.config({\n// 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。\ndebug: true,\n// 必填，公众号的唯一标识\nappId: res.data.data.appId,\n// 必填，生成签名的时间戳\ntimestamp:res.data.data.timestamp,\n// 必填，生成签名的随机串\nnonceStr:res.data.data.nonceStr,\n// 必填，签名，见附录1\nsignature:res.data.data.signature,\n// 必填，需要使用的JS接口列表，所有JS接口列表见附录2\njsApiList : [ ‘checkJsApi’, ‘scanQRCode’, ‘chooseImage’ ]\n});\nwx.error(function(res) {\nalert(“出错了：” + res.errMsg);<a href="//xn--wx-gy2ck96a4iczua10mw3wp4aq80jbizd.xn--config-8x9pi41fj7k0hj">//这个地方的好处就是wx.config配置错误</a>，会弹出窗口哪里错误，然后根据微信文档查询即可。\n});\nwx.ready(function(res){\nalert(‘成功’)\nwx.checkJsApi({\njsApiList: [‘chooseImage’], // 需要检测的JS接口列表，所有JS接口列表见附录2,\nfail: function (res) {\nalert(“微信版本太低，不支持分享给朋友的功能！”);\n},\nsuccess: function (res) {\nalert(“支持QQ分享。”);\n}\n// success: function(res) {\n//   console.log(‘success’)\n// 以键值对的形式返回，可用的api值true，不可用为false\n// 如：{“checkResult”:{“chooseImage”:true},“errMsg”:“checkJsApi:ok”}\n// }\n});\n})\n}\n})\n})</p>\n<p>ready  error  方法都不执行，求解决</p>\n</div>',title:"微信SDK 前端config 配置好，无反应",last_reply_at:"2017-10-19T01:30:39.179Z",good:!1,top:!1,reply_count:0,visit_count:49,create_at:"2017-10-19T01:30:39.179Z",author:{loginname:"xiaoyu311",avatar_url:"https://avatars3.githubusercontent.com/u/29394664?v=4&s=120"}},{id:"59e75c68c08dd9db362e0f8b",author_id:"56ff5d8e8265278d59c7e46f",tab:"share",content:'<div class="markdown-text"><p>想知道你们公司是用node来做什么的，公司想推node遇到了各方面的阻力</p>\n</div>',title:"nodejs应用场景及部署",last_reply_at:"2017-10-19T01:24:51.496Z",good:!1,top:!1,reply_count:1,visit_count:140,create_at:"2017-10-18T13:51:36.243Z",author:{loginname:"yudawei1230",avatar_url:"https://avatars.githubusercontent.com/u/15976653?v=3&s=120"}},{id:"59e5bfc0eab6a6536874022a",author_id:"5996ac6dbae6f2ed6f7e4b15",tab:"share",content:'<div class="markdown-text"><h4>背景</h4>\n<p>前一阵子，我刚写了篇<a href="http://www.jianshu.com/p/43c604177c08">React全家桶实战</a>，介绍了下我用react全家桶构建一个react webapp的中遇到的一些问题。后来，我发现了mobx。然后静下心去看一看它的文档。发现很有趣，所以我把这个项目用mobx重构了一次。旧的版本是用react全家桶，就是react+redux+redux-saga+…构建的, 在github的old-verson的分支上。大家有兴趣也可以看看。</p>\n<h4>源码地址</h4>\n<p><a href="https://github.com/Juliiii/React-Cnode">传送门</a>\n如果可以，希望大家star和fork。希望大神能指教一下~</p>\n<h4>demo</h4>\n<p><img src="https://user-gold-cdn.xitu.io/2017/10/16/e1e2d85515cb8026c67365c3b94b2932" alt="demo"></p>\n<p>当然还有， 欢迎大家star和fork, <a href="https://github.com/Juliiii/React-Cnode">传送门</a></p>\n</div>',title:"React + Mobx构建React-Cnode",last_reply_at:"2017-10-19T01:04:36.145Z",good:!1,top:!1,reply_count:3,visit_count:265,create_at:"2017-10-17T08:30:56.553Z",author:{loginname:"Juliiii",avatar_url:"https://avatars3.githubusercontent.com/u/23744602?v=4&s=120"}},{id:"59e783f5c08dd9db362e0f97",author_id:"59227363d371b6372a8afc26",tab:"share",content:'<div class="markdown-text"><p>找java的connector时无意间发现的，一看文档发布日期竟然一个月前就有了\n下载地址https://dev.mysql.com/downloads/connector/nodejs/\n文档https://dev.mysql.com/doc/dev/connector-nodejs/</p>\n<p>版本要求\nNode.js 4.2.x\nMySQL 5.7.19 (挺新的版本了，大多数人应该都要重新下一个，顺便附上下载地址https://dev.mysql.com/downloads/mysql/)\n先安装了再说 <code>npm install @mysql/xdevapi</code></p>\n<p>官方给的示例代码</p>\n<pre class="prettyprint language-javascript"><code>const mysql = require(&#x27;@mysql&#x2F;xdevapi&#x27;);\n\nmysql\n    .getSession({\n        host: &#x27;localhost&#x27;,\n        port: 33060,\n        dbUser: &#x27;user&#x27;,\n        dbPassword: &#x27;passwd&#x27;\n    })\n    .then(session =&gt; {\n        console.log(&#x27;Session created&#x27;);\n\n        return session.createSchema(&#x27;test_schema&#x27;);\n    })\n    .then(schema =&gt; {\n        console.log(&#x27;Schema created&#x27;);\n\n        return schema.createCollection(&#x27;myCollection&#x27;);\n    })\n    .then(collection =&gt; {\n        console.log(&#x27;Collection created&#x27;)\n\n        return Promise.all([\n            collection\n                .add({ baz: { foo: &#x27;bar&#x27; } }, { foo: { bar: &#x27;baz&#x27; } })\n                .execute(),\n            collection\n                .find(&quot;$.baz.foo == &#x27;bar&#x27;&quot;)\n                .execute(row =&gt; {\n                    console.log(&#x27;Found row: %j&#x27;, row);\n                })\n                .then(res =&gt; {\n                    console.log(&#x27;Collection find finished&#x27;);\n                }),\n            collection\n                .remove(&quot;($.foo.bar) == &#x27;baz&#x27;&quot;)\n                .execute()\n                .then(() =&gt; {\n                    console.log(&#x27;Document deleted&#x27;);\n                }),\n            collection\n                .drop()\n                .then(() =&gt; {\n                    console.log(&#x27;Collection deleted&#x27;);\n                })\n        ]);\n    })\n    .then(() =&gt; {\n        return session.dropSchema(&#x27;test_schema&#x27;);\n    })\n    .then(() =&gt; {\n        console.log(&#x27;Schema deleted&#x27;);\n\n        return session.close();\n    })\n    .then(() =&gt; {\n        console.log(&#x27;Session destroyed&#x27;);\n    })\n    .catch(err =&gt; {\n        console.log(err.stack);\n    });\n</code></pre><p>看起来相当不错，可以去尝试一下了</p>\n</div>',title:"刚发现MySQL发布了Node的Connector",last_reply_at:"2017-10-19T00:08:25.364Z",good:!1,top:!1,reply_count:1,visit_count:153,create_at:"2017-10-18T16:40:21.087Z",author:{loginname:"dislido",avatar_url:"https://avatars2.githubusercontent.com/u/25094788?v=4&s=120"}},{id:"59e72932d081ecfd360d86a6",author_id:"5595d50047e6bdc30297ed1a",tab:"ask",content:'<div class="markdown-text"><p>有些不明白为什么有些静态文件是 from memory cache , 而有些是 from disk cache,在网上查了下他们的差别（当然不一定具体）\n200 from memory cache不访问服务器，直接读缓存，从内存中读取缓存。此时的数据时缓存到内存中的，当kill进程后，也就是浏览器关闭以后，数据将不存在。但是这种方式只能缓存派生资源</p>\n<p>200 from disk cache不访问服务器，直接读缓存，从磁盘中读取缓存，当kill进程时，数据还是存在。这种方式也只能缓存派生资源\n但是我发现，虽然都不访问服务器，但是 from memory cache 耗时为 0，from disk cache 还是有几十或几百ms的耗时，那么\nfrom disk cache 的资源，对页面访问速度还是其实得不到优化？</p>\n<p>其实还是回到一个问题上。什么情况下静态资源存的是 memory cache ，什么时候存 disk cache？</p>\n</div>',title:"关于chrome 的 memory cache 和 disk cache 的疑问",last_reply_at:"2017-10-18T23:23:27.547Z",good:!1,top:!1,reply_count:1,visit_count:110,create_at:"2017-10-18T10:13:06.908Z",author:{loginname:"doramart",avatar_url:"https://avatars1.githubusercontent.com/u/11911066?v=4&s=120"}},{id:"59ddb75661932717683d221f",author_id:"588edb995d4612c33919ea4c",tab:"share",content:'<div class="markdown-text"><p>长假回来，继续码我的阿里云全栈之路的系列文章，但发现阿里云栖好像只有看的没有交流的，希望在这里能够有志同道合的朋友一起交流下。后续文章会在这边也更新下。</p>\n<p><a href="https://yq.aliyun.com/users/1314387063968361">我的博客</a></p>\n<p><a href="https://yq.aliyun.com/articles/215234">基于阿里的Node全栈之路（一）部署Docker</a>\n<a href="https://yq.aliyun.com/articles/216232">基于阿里的Node全栈之路（二）阿里负载均衡的HTTPS优化方案</a>\n<a href="https://yq.aliyun.com/articles/216361">基于阿里的Node全栈之路（三）利用阿里云OSS实现前后端分离</a>\n<a href="https://yq.aliyun.com/articles/216362">基于阿里的Node全栈之路（四）前后端分离进阶-自动上传前端代码到OSS</a>\n<a href="https://yq.aliyun.com/articles/217964">基于阿里的Node全栈之路（五）前后端分离进阶-接口篇</a>\n<a href="https://yq.aliyun.com/articles/224355">基于阿里的Node全栈之路（六）专有网络VPC的应用</a></p>\n</div>',title:"基于阿里的Node全栈之路",last_reply_at:"2017-10-18T16:42:37.288Z",good:!1,top:!1,reply_count:13,visit_count:1541,create_at:"2017-10-11T06:16:54.507Z",author:{loginname:"mumudev",avatar_url:"https://avatars3.githubusercontent.com/u/16707612?v=4&s=120"}},{id:"59e55e6feab6a653687401ec",author_id:"576a3010d0aa704d0728ac7c",tab:"ask",content:'<div class="markdown-text"><p><img src="//dn-cnode.qbox.me/FupcL0kTVO4gaYiA6CoASDyvjnb1" alt="WX20171017-093234@2x.png">\n<img src="//dn-cnode.qbox.me/FiwcDYb1u_TtDc9UxlXzoUL3S5Kw" alt="WX20171017-093425@2x.png">\n我已经设置了白名单了，他还是报错，<code>invalid csrf token</code>\n谢谢啦</p>\n</div>',title:"egg用form Data提交403，请问这是什么问题？",last_reply_at:"2017-10-18T16:02:22.261Z",good:!1,top:!1,reply_count:4,visit_count:236,create_at:"2017-10-17T01:35:43.979Z",author:{loginname:"GGStupid",avatar_url:"https://avatars0.githubusercontent.com/u/17698726?v=4&s=120"}},{id:"59e6fea8c08dd9db362e0f6b",author_id:"572c1fc6378c132e17eb26fa",tab:"ask",content:'<div class="markdown-text"><p><strong>请问怎么做中转，我先通过<code>stream-wormhole</code>上传文件</strong></p>\n<pre class="prettyprint"><code>const stream = yield this.getFileStream();\n\t  let filepath = path.join(this.app.config.baseDir, &#96;app&#x2F;public&#x2F;images&#x2F;pcbFile&#x2F;${stream.filename}&#96;);\n\t  if (stream.fields.title === &#x27;mock-error&#x27;) {\n\t    filepath = path.join(this.app.config.baseDir, &#96;app&#x2F;public&#x2F;images&#x2F;not-exists&#x2F;dir&#x2F;${stream.filename}&#96;);\n\t  } else if (stream.fields.title === &#x27;mock-read-error&#x27;) {\n\t    filepath = path.join(this.app.config.baseDir, &#96;app&#x2F;public&#x2F;images&#x2F;read-error-${stream.filename}&#96;);\n\t  }\n\t  this.logger.warn(&#x27;Saving %s to %s&#x27;, stream.filename, filepath);\n\t  try {\n\t    yield saveStream(stream, filepath);\n\t  } catch (err) {\n\t    yield sendToWormhole(stream);\n\t    throw err;\n\t  }\n \tconsole.log(stream)\n\n</code></pre><p><strong>然后想问一下怎么再用egg-oss把文件再次上传上去，或者有更好的方法\n这是官方的使用示例</strong></p>\n<blockquote>\n<p>直接ajax使用这个上传到oss可以，但是是跨域的</p>\n</blockquote>\n<pre class="prettyprint"><code>const parts = this.multipart();\n  let object;\n  let part;\n  part = yield parts;\n  while (part) {\n    if (part.length) {\n      &#x2F;&#x2F; arrays are busboy fields\n      console.log(&#x27;field: &#x27; + part[0]);\n      console.log(&#x27;value: &#x27; + part[1]);\n      console.log(&#x27;valueTruncated: &#x27; + part[2]);\n      console.log(&#x27;fieldnameTruncated: &#x27; + part[3]);\n    } else {\n      &#x2F;&#x2F; otherwise, it&#x27;s a stream\n      console.log(&#x27;field: &#x27; + part.fieldname);\n      console.log(&#x27;filename: &#x27; + part.filename);\n      console.log(&#x27;encoding: &#x27; + part.encoding);\n      console.log(&#x27;mime: &#x27; + part.mime);\n      &#x2F;&#x2F; file handle\n      object = yield this.oss.put(&#x27;egg-oss-demo-&#x27; + part.filename, part);\n    }\n    part = yield parts;\n  }\n  console.log(&#x27;and we are done parsing the form!&#x27;);\n  if (object) {\n    console.log(&#x27;get oss object: %j&#x27;, object);\n    this.unsafeRedirect(object.url);\n  } else {\n    this.body = &#x27;please select a file to upload！&#x27;;\n  }\n</code></pre><p><strong>请各位指教一下</strong></p>\n</div>',title:"【egg】关于egg-oss上传的问题，用form表单上传没问题，使用ajax提交不上去",last_reply_at:"2017-10-18T15:57:42.464Z",good:!1,top:!1,reply_count:1,visit_count:149,create_at:"2017-10-18T07:11:36.570Z",author:{loginname:"2VCl1md",avatar_url:"https://avatars0.githubusercontent.com/u/17250349?v=4&s=120"}},{id:"59e76319c08dd9db362e0f8f",author_id:"587f33bb2be37ea339c990e5",tab:"ask",content:'<div class="markdown-text"><p>最近入坑eggjs，业务场景需要用到一个mongo下多个库的使用，使用eggjs的egg-mongoose这个插件，实在没找到如何配置同一个mongodb下多个库的连接的切换的方式</p>\n</div>',title:"eggjs中如何使用同一个mongo下的多个库",last_reply_at:"2017-10-18T14:20:09.422Z",good:!1,top:!1,reply_count:0,visit_count:82,create_at:"2017-10-18T14:20:09.422Z",author:{loginname:"feng-fu",avatar_url:"https://avatars1.githubusercontent.com/u/20320122?v=4&s=120"}},{id:"59e0d79961932717683d2313",author_id:"590d467ccfb837012a59b41a",tab:"ask",content:'<div class="markdown-text"><p>如上</p>\n</div>',title:"socket自定义的事件过多会造成什么影响？",last_reply_at:"2017-10-18T14:01:14.336Z",good:!1,top:!1,reply_count:2,visit_count:225,create_at:"2017-10-13T15:11:21.986Z",author:{loginname:"zed31124",avatar_url:"https://avatars1.githubusercontent.com/u/20882991?v=4&s=120"}},{id:"59e62c48eab6a6536874024a",author_id:"59d8aaaaf7cc61fb67daae8b",tab:"ask",content:'<div class="markdown-text"><p>大家好，小白最近在学习nodejs，跟着教程敲代码，之前自动生成的livereload是能够正常使用的，但是这两天就不能够使用了，也没有修改过livereload的文件，不知道哪里出了问题，有大神遇到类似问题的么？\n程序配置：\n<img src="//dn-cnode.qbox.me/FqT3-gve65Z1WYszfO2iCBRkb93g" alt="image.png">\n<img src="//dn-cnode.qbox.me/FnToLDvjY8m1zJVv0zzd3xA3x-mF" alt="image.png">\n报错信息：\n<img src="//dn-cnode.qbox.me/FoFFGKrmEE45tc1hqoPXDKtYkJ6i" alt="image.png">\n错误跟踪：\n<img src="//dn-cnode.qbox.me/FvfYgxWTsNmj9v2xvC4llKE1PyF3" alt="image.png">\n检查了端口也没有被占用：\n<img src="//dn-cnode.qbox.me/FoU31jQeQ5eqcnu0jCVfpWAnuD6w" alt="image.png">\n到这里就没有什么思路了，搜索也没有结果，怎么会出现102的错误呢？有大神遇到类似问题的么？应该如何修改呢？能给个思路也可以，谢谢。</p>\n</div>',title:"最新版本express-generator生成的脚手架文件中的页面自动刷新组件livereload不能够正常使用",last_reply_at:"2017-10-18T13:48:21.542Z",good:!1,top:!1,reply_count:1,visit_count:172,create_at:"2017-10-17T16:14:00.042Z",author:{loginname:"wzc314159",avatar_url:"https://avatars2.githubusercontent.com/u/20775534?v=4&s=120"}},{id:"59e70a4fd081ecfd360d8683",author_id:"59e6c301bcfcc03162f2ffc3",tab:"share",content:'<div class="markdown-text"><p>// 这个是计算引力波到达地球的能量…\n107,218<em>1000/3600s\n引力波初始速度 0.3倍光速\nM=球重量  5.965</em>10^24 kg\n初始质量</p>\n<p>3000M\n初始能量::: 0.33<em>10^8</em>3<em>10^8=8947.5 <em>1e40\n0.5mv2\n18亿光年…  9460800000000000</em>9460800000000000</em>pi<em>4=1.1247748251000814e+33\n4  pi r</em>r   51000万平方千米==51000*1e6==12750000000; //这个是地区的球中切面的面积\n//1.1335602216084021e-23  假设引力波能量是球形表面扩散的,然后四周获取的能量是均匀的 地球切面面积所在扩散面积的比例</p>\n<p>最终地球获取的能量 1.0142530082841178e+21\n//没考虑衰减… 衰减不好计算…</p>\n</div>',title:"无聊算下能量....",last_reply_at:"2017-10-18T13:22:38.722Z",good:!1,top:!1,reply_count:1,visit_count:181,create_at:"2017-10-18T08:01:19.750Z",author:{loginname:"spitWind",avatar_url:"https://avatars2.githubusercontent.com/u/18753430?v=4&s=120"}},{id:"59e5a1aaeab6a65368740217",author_id:"5976b9b80c87675e74674819",tab:"ask",content:'<div class="markdown-text"><p>下面这段代码的问题是，在前面的语句执行完后，在后面eventproxy中，打印一个字符，按说每次循环只打印一次，当循环长度为2的时候，应该打印2次字符串，但是实际却打印了不止2次，麻烦大神帮我看看是什么问题？？谢谢了！！！！\n\t\t\t\t\tlet len = 2;\n\t\t\t\t\tlet i = 0;\n\t\t\t\t\t(function next(i,len,callback) {\n\t\t\t\t\t\tif(i &lt; len) {\n\t\t\t\t\t\t\tlet sql1 = util.format(‘select count(OnType) as cnt1 from %s where OnType = 0 and ’ +\n\t\t\t\t\t\t\t\t’ UpdateTime = “%s” and GwType = “%s” ‘,GwOnOffHist,yesterday,res[i][“GwType”]);\n\t\t\t\t\t\t\tmysqlClient(sql1,function(err,res) {\n\t\t\t\t\t\t\t\tif(err) {\n\t\t\t\t\t\t\t\t\tlightLog.error(‘pid:’,process.pid,’’,err.stack);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t// lightLog.debug(‘pid:’,process.pid,’’,res);\n\t\t\t\t\t\t\t\t\t// console.log(res);\n\t\t\t\t\t\t\t\t\tep.emit(‘data1’,res);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tlet sql2 = util.format(‘select count(OnType) as cnt2 from %s where OnType = 1 and ’ +\n\t\t\t\t\t\t\t\t’ UpdateTime = “%s” and GwType = “%s” ‘,GwOnOffHist,yesterday,res[i][“GwType”]);\n\t\t\t\t\t\t\tmysqlClient(sql2,function(err,res) {\n\t\t\t\t\t\t\t\tif(err) {\n\t\t\t\t\t\t\t\t\tlightLog.error(‘pid:’,process.pid,’’,err.stack);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t// lightLog.debug(‘pid:’,process.pid,’’,res);\n\t\t\t\t\t\t\t\t\t// console.log(res);\n\t\t\t\t\t\t\t\t\tep.emit(‘data2’,res);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tlet sql3 = util.format(‘select count(OnType) as cnt3 from %s where OnType = 2 and ’ +\n\t\t\t\t\t\t\t\t’ UpdateTime = “%s” and GwType = “%s” ‘,GwOnOffHist,yesterday,res[i][“GwType”]);\n\t\t\t\t\t\t\tmysqlClient(sql3,function(err,res) {\n\t\t\t\t\t\t\t\tif(err) {\n\t\t\t\t\t\t\t\t\tlightLog.error(‘pid:’,process.pid,’’,err.stack);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t// lightLog.debug(‘pid:’,process.pid,’’,res);\n\t\t\t\t\t\t\t\t\t// console.log(res);\n\t\t\t\t\t\t\t\t\tep.emit(‘data3’,res);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tlet sql4 = util.format(‘select count(OffType) as cnt4 from %s where OffType = 0 and ’ +\n\t\t\t\t\t\t\t\t’ UpdateTime = “%s” and GwType = “%s” ‘,GwOnOffHist,yesterday,res[i][“GwType”]);\n\t\t\t\t\t\t\tmysqlClient(sql4,function(err,res) {\n\t\t\t\t\t\t\t\tif(err) {\n\t\t\t\t\t\t\t\t\tlightLog.error(‘pid:’,process.pid,’’,err.stack);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t// lightLog.debug(‘pid:’,process.pid,’’,res);\n\t\t\t\t\t\t\t\t\t// console.log(res);\n\t\t\t\t\t\t\t\t\tep.emit(‘data4’,res);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tlet sql5 = util.format(‘select count(OffType) as cnt5 from %s where OffType = 1 and ’ +\n\t\t\t\t\t\t\t\t’ UpdateTime = “%s” and GwType = “%s” ‘,GwOnOffHist,yesterday,res[i][“GwType”]);\n\t\t\t\t\t\t\tmysqlClient(sql5,function(err,res) {\n\t\t\t\t\t\t\t\tif(err) {\n\t\t\t\t\t\t\t\t\tlightLog.error(‘pid:’,process.pid,’’,err.stack);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t// lightLog.debug(‘pid:’,process.pid,’’,res);\n\t\t\t\t\t\t\t\t\t// console.log(res);\n\t\t\t\t\t\t\t\t\tep.emit(‘data5’,res);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tlet sql6 = util.format(‘select count(OffType) as cnt6 from %s where OffType = 2 and ’ +\n\t\t\t\t\t\t\t\t’ UpdateTime = “%s” and GwType = “%s” ‘,GwOnOffHist,yesterday,res[i][“GwType”]);\n\t\t\t\t\t\t\tmysqlClient(sql6,function(err,res) {\n\t\t\t\t\t\t\t\tif(err) {\n\t\t\t\t\t\t\t\t\tlightLog.error(‘pid:’,process.pid,’’,err.stack);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse{\n\t\t\t\t\t\t\t\t\t// lightLog.debug(‘pid:’,process.pid,’’,res);\n\t\t\t\t\t\t\t\t\t// console.log(res);\n\t\t\t\t\t\t\t\t\tep.emit(‘data6’,res);\n\t\t\t\t\t\t\t\t\tnext(i + 1,len,callback);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tep.tail(‘data1’,‘data2’,‘data3’,‘data4’,‘data5’,‘data6’,function(data1,data2,data3,data4,data5,data6) {\n\t\t\t\t\t\t\tconsole.log(‘qq’);//就是在这里打印字符串</p>\n<pre class="prettyprint"><code>\t\t\t\t\t\t&#x2F;&#x2F; console.log(data1);\n\t\t\t\t\t\t&#x2F;&#x2F; console.log(data2);\n\t\t\t\t\t\t&#x2F;&#x2F; console.log(data3);\n\t\t\t\t\t\t&#x2F;&#x2F; console.log(data4);\n\t\t\t\t\t\t&#x2F;&#x2F; console.log(data5);\n\t\t\t\t\t\t&#x2F;&#x2F; console.log(data6);\n\t\t\t\t\t\t&#x2F;&#x2F; let sql = util.format(&#x27;insert into %s (Layer1ID,GwType,StrgyOnNum,StrgyOffNum,ForceOnNum,ForceOffNum,UpdateTime) &#x27; +\n\t\t\t\t\t\t&#x2F;&#x2F; \t&#x27; values(%s,%s,%s,%s,%s,%s,&quot;%s&quot;)&#x27;,OnOffNumRec,1,i,data1[0][&quot;cnt1&quot;],data2[0][&quot;cnt2&quot;],\n\t\t\t\t\t\t&#x2F;&#x2F; \tdata3[0][&quot;cnt3&quot;],data4[0][&quot;cnt4&quot;],yesterday);\n\t\t\t\t\t\t&#x2F;&#x2F; mysqlClient(sql,function(err,res) {\n\t\t\t\t\t\t&#x2F;&#x2F; \tif(err) {\n\t\t\t\t\t\t&#x2F;&#x2F; \t\tlightLog.error(&#x27;pid:&#x27;,process.pid,&#x27;&#x27;,err.stack);\n\t\t\t\t\t\t&#x2F;&#x2F; \t}\n\t\t\t\t\t\t&#x2F;&#x2F; \telse{\n\t\t\t\t\t\t&#x2F;&#x2F; \t\t&#x2F;&#x2F; lightLog.debug(&#x27;pid:&#x27;,process.pid,&#x27;&#x27;,res);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t&#x2F;&#x2F; \t}\n\t\t\t\t\t\t&#x2F;&#x2F; });\n\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t}\n\t\t\t\t}(0,len,function() {\n\n\t\t\t\t}));</code></pre></div>',title:"大神帮我看看这段代码是什么地方出了问题",last_reply_at:"2017-10-18T13:20:48.058Z",good:!1,top:!1,reply_count:11,visit_count:392,create_at:"2017-10-17T06:22:34.635Z",author:{loginname:"quanpf2481",avatar_url:"https://avatars3.githubusercontent.com/u/30330930?v=4&s=120"}},{id:"59b4a4b57a42adf666919dcd",author_id:"573ac2cdf610cbba1dc4519b",tab:"share",content:'<div class="markdown-text"><blockquote>\n<h3>1. 来源</h3>\n</blockquote>\n<blockquote>\n<p>离上次用<a href="https://github.com/FantasyGao/MyBlog">express</a>搭建博客一年多时间了，由于看到大神们的博客各种花哨，心中落差感油然而生，所以下决心抽出时间重新搭建一下博客。不过先要感谢很多开源的作者，为了能够快速开发选用了很多开源的项目组件，比如<a href="https://www.iviewui.com/">iview</a>（感觉不错，推荐给大家）,自己也写了个<a href="https://github.com/FantasyGao/vue-smartTable">分页表格插件</a>，也推荐给大家，算向前辈们学习了^-^</p>\n</blockquote>\n<blockquote>\n<h3>2. 博客简介</h3>\n</blockquote>\n<ol>\n<li>Vue2.js 搭建前端架构<a href="https://github.com/FantasyGao/blog-frontend">项目地址</a></li>\n<li>koa2.js 搭建后端逻辑处理<a href="https://github.com/FantasyGao/blog-backend">项目地址</a></li>\n<li>利用nginx部署，实现前后端分离目的</li>\n<li><a href="http://www.fantasygao.me">线上地址</a> <a href="http://www.fantasygao.me/admin/login">管理员地址</a> 用户名：admin 密码：123456 感谢京东云的一个月免费服务器（有点慢哦)</li>\n</ol>\n<blockquote>\n<h3>3. 实现功能</h3>\n</blockquote>\n<ul>\n<li><em>用户层</em></li>\n</ul>\n<ol>\n<li>文章按照种类区分</li>\n<li>文章可拥有多个不同标签</li>\n<li>文章按照种类区分</li>\n<li>支持文章评论，用户之间的多层回复</li>\n<li>适应移动端</li>\n</ol>\n<ul>\n<li><em>管理员层</em></li>\n</ul>\n<ol>\n<li>JWT权限验证</li>\n<li>撰写文章（markdown编写，实时查看效果，上传文件）</li>\n<li>修改文章（可选保存新版本或覆盖至上一个版本）</li>\n<li>全部文章管理（上，下线，预览效果，删除文章等）</li>\n<li>评论管理（审核，删除等）</li>\n<li>回复管理（审核，删除等）</li>\n<li>注册人员管理（查看，删除等）</li>\n<li>评论用户或者回复用户 （查看评论或回复详情）</li>\n<li>添加评论用户或者回复用户为特别关注</li>\n<li>登录与操作日志查看</li>\n<li>评论用户或者回复用户 （查看评论或回复详情）</li>\n<li>网站数据分析（评论最多与浏览最多文章查看）</li>\n<li>网站数据用图表展示（近十天浏览量–折线图，浏览最多十篇文章–饼图，评论最多十篇文章–柱状图）</li>\n</ol>\n<blockquote>\n<h3>4. 后续</h3>\n</blockquote>\n<ol>\n<li>添加多层权限，开放为多人博客</li>\n<li>待思考</li>\n</ol>\n<blockquote>\n<h3>5. 截图</h3>\n</blockquote>\n<p><img src="http://116.196.114.161/uploads/1504934217801.png" alt="1">\n<img src="http://116.196.114.161/uploads/1504934253492.png" alt="2">\n<img src="http://116.196.114.161/uploads/1504934264904.png" alt="3">\n<img src="http://116.196.114.161/uploads/1504934275967.png" alt="4">\n<img src="http://116.196.114.161/uploads/1504934287447.png" alt="5"></p>\n<blockquote>\n<h3>6. 求坑</h3>\n</blockquote>\n<ol>\n<li>求个初级node.js开发的坑，希望有坑的大牛们给个联系方式，邮箱啥的。</li>\n<li>虽然我是小菜鸟，但我热爱学习啊</li>\n<li>在某个大点的公司搞过快一年的前端</li>\n<li>希望学历要求低一点^0^</li>\n</ol>\n</div>',title:"前后端分离实践：vue2.js+koa2的个人博客项目 （顺带求个nodejs的坑^-^）",last_reply_at:"2017-10-18T12:25:49.317Z",good:!1,top:!1,reply_count:5,visit_count:1134,create_at:"2017-09-10T02:34:29.365Z",author:{loginname:"FantasyGao",avatar_url:"https://avatars0.githubusercontent.com/u/17523638?v=4&s=120"}},{id:"5514b132e26684ed7ff21bf2",author_id:"53fdd8502243147e7857b2bb",tab:"ask",content:'<div class="markdown-text"><p>发现一堆网站上不了\n你们都用什么 VPN? 推荐下\n以前到 V2EX 查，发现 V2EX 也上不了\n免费的付费的都行</p>\n</div>',title:"你用什么 VPN?",last_reply_at:"2017-10-18T10:38:14.867Z",good:!1,top:!1,reply_count:32,visit_count:7189,create_at:"2015-03-27T01:24:02.838Z",author:{loginname:"russj",avatar_url:"https://avatars2.githubusercontent.com/u/2281763?v=4&s=120"}},{id:"53b93bab1b009b31532ef934",author_id:"50f7a0a9df9e9fcc5889a1b0",content:'<div class="markdown-text"><p>要安全的, 要用gmail.\n封这么厉害…</p>\n</div>',title:"有靠谱的VPN推荐吗?",last_reply_at:"2017-10-18T10:37:00.570Z",good:!1,top:!1,reply_count:32,visit_count:17808,create_at:"2014-07-06T12:06:03.451Z",author:{loginname:"ronincn",avatar_url:"//gravatar.com/avatar/0582e15ee13a3fef9d78dac6f0c71575?size=48"}},{id:"59e72a64a9a1e19f3634c7de",author_id:"58d866b86f8b9bf02d1d0b20",tab:"ask",content:'<div class="markdown-text"><p>遇到个想不明白的问题，是这样的，代码如果这样写\n<img src="//dn-cnode.qbox.me/FveoCmUJ7wPV3KXpBuPMY3_xchds" alt="image.png">\n就会出现这个问题，删掉  application/json会出现编码问题，把application/json 后面改成逗号 就一切正常，如果不等待await 的结果，用分号也是正常的。</p>\n<p>如果问题太白痴。不要骂我咯。。。Content-Type 该怎么设置  还是其他地方出的问题</p>\n</div>',title:"使用writeHead设置响应头 出现   Can't set headers after they are sent",last_reply_at:"2017-10-18T10:18:12.466Z",good:!1,top:!1,reply_count:0,visit_count:101,create_at:"2017-10-18T10:18:12.466Z",author:{loginname:"wjiban",avatar_url:"https://avatars3.githubusercontent.com/u/23730727?v=4&s=120"}},{id:"59e70ace7675e3bc36f77bf5",author_id:"58d39d9003d476b42d34c684",tab:"ask",content:'<div class="markdown-text"><pre class="prettyprint language-html"><code>&lt;el-form-item label=&quot;订阅指标表是否显示索引号&quot;&gt;\n  &lt;el-switch\n    v-model=&quot;config.subscriptionsOption.defaultShowIndex&quot;\n    on-color=&quot;#13ce66&quot;\n    off-color=&quot;#ff4949&quot;&gt;\n    &lt;&#x2F;el-switch&gt;\n &lt;&#x2F;el-form-item&gt;\n \n &lt;script&gt;\n export default {\n   data () {\n     return {\n       config: [\n\t   \t  &#x27;subscriptionsOption&#x27;: {\n\t\t  \t&quot;defaultShowDay&quot;: 10,\n\t\t\t&quot;defaultShowIndex&quot;: true,\n\t\t\t&quot;tableShowOption&quot;: {\n\t\t\t  &quot;statisticsOption&quot;: [ ],\n\t\t\t  &quot;moreOption&quot;: [ ],\n\t\t\t  &quot;otherOption&quot;: [ ]\n\t\t\t}\n\t\t  }\n\t   ]\n     }\n   }\n }\n &lt;&#x2F;script&gt;\n</code></pre><p><img src="//dn-cnode.qbox.me/FrABIQ4pcyQWjtIjNpKGQG6sZCFh" alt="image.png"></p>\n<p>有观察到能正常改变配置值，但是这个显示 undefined 是怎么回事</p>\n<p><img src="//dn-cnode.qbox.me/Fvua-xn9vmY__CxGFvrTbiMI37OB" alt="image.png"></p>\n</div>',title:"【Vue】绑定数据出错",last_reply_at:"2017-10-18T09:56:26.177Z",good:!1,top:!1,reply_count:2,visit_count:113,create_at:"2017-10-18T08:03:26.641Z",author:{loginname:"vxhly",avatar_url:"https://avatars0.githubusercontent.com/u/17906558?v=4&s=120"}},{id:"59d4471af7cc61fb67daae32",author_id:"57b99bc2dcaeb5d932db220a",tab:"share",content:'<div class="markdown-text"><p>国庆期间试着撸了个静态博客工具 ，欢迎一起交流 ：  <a href="https://github.com/laoqiren/yohe">https://github.com/laoqiren/yohe</a></p>\n<hr>\n<h1>yohe</h1>\n<p><a href="https://www.npmjs.com/package/yohe"><img src="https://img.shields.io/npm/dm/yohe.svg?style=flat-square" alt="npm"></a><a href="https://github.com/laoqiren/yohe"><img src="https://img.shields.io/npm/v/yohe.svg?style=flat-square" alt="npm"></a><a href="https://github.com/laoqiren/yohe"><img src="https://img.shields.io/npm/l/yohe.svg?style=flat-square" alt="npm"></a></p>\n<p>一个静态博客生成器，采用<a href="https://nodejs.org">Node.js</a>开发。Yohe = 哟呵，一个会让你发出”哟呵，不错哦“感叹的静态博客生成器。</p>\n<p>线上demo: <a href="http://luoxia.me/yohe_site/">http://luoxia.me/yohe_site/</a></p>\n<p><a href="https://github.com/laoqiren/yohe/blob/master/README.md">English doc</a></p>\n<h2>功能</h2>\n<ul>\n<li>简单易用，快速</li>\n<li>本地预览效果</li>\n<li>可定制化信息和主题</li>\n<li>新建自定义页面，可定制化导航菜单</li>\n<li>支持标签，分类，archives,分页等基础设施</li>\n<li>支持通过Github评论(gitment支持)</li>\n<li>首页可过滤指定分类文章</li>\n</ul>\n<h2>安装</h2>\n<pre class="prettyprint"><code>$ npm install yohe -g\n</code></pre><h2>快速开始</h2>\n<p><strong>获取帮助</strong></p>\n<pre class="prettyprint"><code>$ yohe --help\n</code></pre><p><strong>初始化博客</strong></p>\n<pre class="prettyprint"><code>$ yohe init myblog\n$ cd myblog\n</code></pre><p>该命令会初始化博客目录，包括初始化主题，文章，自定义页面等目录，以及加载默认配置文件</p>\n<p><strong>创建新文章</strong></p>\n<pre class="prettyprint"><code>$ yohe new &lt;postName&gt;\n</code></pre><p>该命令在<code>source/_posts/</code>下新建<code>&lt;postName&gt;.md</code>文件，在这里写作</p>\n<p><strong>渲染博客文件</strong></p>\n<pre class="prettyprint"><code>$ yohe build\n</code></pre><p>该命令会渲染博客到<code>public</code>目录</p>\n<p><strong>本地预览</strong></p>\n<pre class="prettyprint"><code>$ yohe server\n</code></pre><p>该命令会在本地起一个静态文件服务器，端口，子路径等信息可通过<code>config.json</code>配置</p>\n<p><strong>新增自定义页面</strong></p>\n<pre class="prettyprint"><code>$ yohe page &lt;pageName&gt;\n</code></pre><p>该命令会在<code>source/_extra</code>下生成<code>&lt;pageName&gt;.md</code>文件,默认布局为<code>about</code>页面布局</p>\n<h2>配置文件</h2>\n<p>运行<code>yohe init</code>后会生成<code>config.json</code>,配置说明：</p>\n<pre class="prettyprint language-js"><code>{\n    &quot;basic&quot;: {\n        &quot;title&quot;: &quot;My Blog&quot;, &#x2F;&#x2F; 博客标题\n        &quot;author&quot;: &quot;laoqiren&quot;, &#x2F;&#x2F; 博客作者\n        &quot;description&quot;: &quot;爱技术，爱生活&quot;, &#x2F;&#x2F; 个性签名\n        &quot;root&quot;: &quot;&quot; &#x2F;&#x2F; 博客根目录，当博客网站位于子路径如&quot;http:&#x2F;&#x2F;luoxia.me&#x2F;yohe_site&quot;时，配置为&quot;&#x2F;yohe_site&quot;\n    },\n    &quot;theme&quot;: {\n        &quot;themeName&quot;: &quot;default&quot;,  &#x2F;&#x2F; 主题名字\n        &quot;highlightTheme&quot;: &quot;railscasts&quot;, &#x2F;&#x2F; 代码高亮主题，所有可用主题列表参照&quot;https:&#x2F;&#x2F;github.com&#x2F;isagalaev&#x2F;highlight.js&#x2F;tree&#x2F;master&#x2F;src&#x2F;styles&quot;\n        &quot;per_page&quot;: 6,&#x2F;&#x2F;每页展示的文章数\n        &quot;filter&quot;: [&quot;life&quot;,&quot;随笔&quot;],  &#x2F;&#x2F; 首页过滤分类文章，比如生活随笔文章不显示在首页列表\n        &quot;navPages&quot;: [     &#x2F;&#x2F; 自定义导航菜单的页面标题和链接\n            {\n                &quot;title&quot;: &quot;标签&quot;,\n                &quot;url&quot;: &quot;&#x2F;tags&quot;\n            },\n            {\n                &quot;title&quot;: &quot;关于&quot;,\n                &quot;url&quot;: &quot;&#x2F;about&quot;\n            },\n            {\n                &quot;title&quot;: &quot;生活随笔&quot;,\n                &quot;url&quot;: &quot;&#x2F;categories&#x2F;life&#x2F;&quot;\n            }\n        ],\n        &quot;reward&quot;: {  &#x2F;&#x2F; 打赏功能配置\n            &quot;enabled&quot;: true,\n            &quot;imgName&quot;: &quot;alipay.jpg&quot;,  &#x2F;&#x2F; 二维码图片名称\n            &quot;words&quot;: &quot;打赏&quot;   &#x2F;&#x2F; 打赏说明\n        }\n    },\n    &quot;server&quot;: {\n        &quot;port&quot;: 3000 &#x2F;&#x2F;本地预览服务器端口\n    },\n    &quot;gitment&quot;: {   &#x2F;&#x2F; gitment评论功能相关配置，gitment使用教程参照”https:&#x2F;&#x2F;github.com&#x2F;imsun&#x2F;gitment“\n        &quot;owner&quot;: &quot;&quot;,\n        &quot;repo&quot;: &quot;&quot;,\n        &quot;oauth&quot;: {\n            &quot;client_id&quot;: &quot;&quot;,\n            &quot;client_secret&quot;: &quot;&quot;\n        }\n    }\n}\n</code></pre><p>更丰富的配置正在开发中。</p>\n<h2>文章格式规范</h2>\n<p>参照下面的例子:</p>\n<pre class="prettyprint"><code>---\ntitle: Cluster模块\ndate: 2016-11-27\ntags: [负载均衡,集群,多进程]\nlayout: post\ncomment: true\ncategories: Nodejs\n---\n</code></pre><p>其中<code>layout</code>默认为<code>post</code>,<code>comment</code>默认为<code>true</code></p>\n<h2>如何发布</h2>\n<p><code>Yohe</code>最终渲染结果在<code>public</code>目录，可采用多种方式起一个静态文件服务器，将<code>public</code>目录发布。</p>\n<h2>如何开发主题</h2>\n<p><strong>layouts:</strong></p>\n<pre class="prettyprint"><code>├── about.html    &#x2F;&#x2F; 关于页面布局（必须）\n├── index.html    &#x2F;&#x2F; 首页布局（必须）\n├── list.html     &#x2F;&#x2F; 特定分类和标签文章列表布局（必须）\n├── post.html     &#x2F;&#x2F; 文章详情页布局（可更名）\n└── tags.html     &#x2F;&#x2F; 标签云布局（必须）\n└── ...           &#x2F;&#x2F; 自定义的布局\n</code></pre><p><strong>assets:</strong>\n静态资源文件放在<code>assets</code>目录下</p>\n<h2>其他技巧</h2>\n<ul>\n<li>要设置更改logo,替换<code>assets/images/logo.png</code>为你自己的logo图片，但名称依旧为<code>logo.png</code></li>\n<li>关于页面为<code>source/_about/about.md</code></li>\n<li>指定首页过滤分类文章，可以很方便地实现<code>blog in blog</code></li>\n<li>文档名和分类名中的空格用<code>-</code>代替</li>\n</ul>\n<h2>TODOs</h2>\n<ul>\n<li>默认主题完善</li>\n<li>archives</li>\n<li>统计等功能</li>\n<li>更丰富的配置</li>\n</ul>\n<h2>LICENSE</h2>\n<p>MIT.</p>\n</div>',title:"Yohe，自己动手撸一个静态博客生成器",last_reply_at:"2017-10-18T09:19:13.576Z",good:!1,top:!1,reply_count:14,visit_count:1763,create_at:"2017-10-04T02:27:38.097Z",author:{loginname:"laoqiren",avatar_url:"https://avatars2.githubusercontent.com/u/16136702?v=4&s=120"}},{id:"59e7172ec08dd9db362e0f7e",author_id:"599b9cecf36051a45246c21c",tab:"ask",content:'<div class="markdown-text"><p><img src="//dn-cnode.qbox.me/Fvg8bHSvBDInRxPdHKI0WXvYeYj3" alt="1.png">\n这个重定向或者404页面改怎么写，放哪儿？尴尬了，掉坑里面了</p>\n</div>',title:"这个重定向或者404页面改怎么写，放哪儿？",last_reply_at:"2017-10-18T09:02:51.655Z",good:!1,top:!1,reply_count:1,visit_count:110,create_at:"2017-10-18T08:56:14.966Z",author:{loginname:"pengchengzhong",avatar_url:"https://avatars2.githubusercontent.com/u/21187882?v=4&s=120"}},{id:"59e05b4b20a1a3647d72abb0",author_id:"5951ab2b984e31dd458c142e",tab:"ask",content:'<div class="markdown-text"><p>想要查询article下面的comment进行分页</p>\n<p><strong>模型如下</strong>\n<img src="//dn-cnode.qbox.me/FrWjDjq5UbXw8YBMaGa80Aa2jWZi" alt="image.png">\n<strong>具体数据</strong>\n<img src="//dn-cnode.qbox.me/FpiD2uciqC4j88kcMuL47F4zEzh1" alt="image.png">\n<strong>现在的article分页</strong></p>\n<pre class="prettyprint"><code>&#x2F;&#x2F; 查找所有文章\nrouter.get(&#x27;&#x2F;admin_article&#x27;, function(req, res, next){\n  var page = Number(req.query.page || 1);\n  var limit = 4;\n  var pages = 0;\n  Model.Article.count().then(function(count){\n    pages = Math.ceil(count&#x2F;limit); &#x2F;&#x2F;总数据除以每页限制数据=页数\n    page = Math.min(page,pages);\n    page = Math.max(page,1);\n    var skip = (page-1)*limit;\n\n    Model.Article.find({}).sort({_id: -1}).limit(limit).skip(skip).then(function(doc){\n      console.log(doc);\n        responseData.code = 200;\n        responseData.message = &#x27;查找所有文章成功&#x27;;\n        responseData.data = doc;\n        responseData.count = count;\n        responseData.limit = limit;\n        responseData.page = page;\n        responseData.pages = pages;\n        responseData.skip = skip;\n        console.log(responseData);\n        res.json(responseData);\n    })\n  })\n})\n</code></pre><p><strong>问题，</strong>\n如何给<strong>article</strong>,集合下面的，<strong>comment</strong>进行分页，就像查询article分页一样</p>\n</div>',title:"mongoose,如何查询集合下面的集合，进行分页，如图",last_reply_at:"2017-10-18T08:57:45.771Z",good:!1,top:!1,reply_count:6,visit_count:286,create_at:"2017-10-13T06:20:59.668Z",author:{loginname:"pengrongjie",avatar_url:"https://avatars1.githubusercontent.com/u/25662399?v=4&s=120"}},{id:"59e6ca07a9a1e19f3634c7a7",author_id:"59e6c301bcfcc03162f2ffc3",tab:"ask",content:'<div class="markdown-text"><p>这合理???\n按道理来说如果模块要重复使用的话 ,不是应该 将模块细化吗? 然后高层依赖底层\n对于单一项目来说 底层依赖高层确实有道理 ,但是如果多项目来说 每一个项目都有写不同底层 来满足高层需求吧</p>\n<p>谬论吧??</p>\n</div>',title:"高层模块不应该依赖于底层模块???",last_reply_at:"2017-10-18T08:49:54.193Z",good:!1,top:!1,reply_count:4,visit_count:215,create_at:"2017-10-18T03:27:03.569Z",author:{loginname:"spitWind",avatar_url:"https://avatars2.githubusercontent.com/u/18753430?v=4&s=120"}},{id:"59e33a31bcfcc03162f2fe5c",author_id:"58d39d9003d476b42d34c684",tab:"ask",content:'<div class="markdown-text"><pre class="prettyprint language-javascript"><code>\n&#x2F;&#x2F; http response 拦截器\ninstance.interceptors.response.use(\n  response =&gt; {\n    return response\n  },\n  error =&gt; {\n    if (error.message === &#x27;Network Error&#x27;) Message({ type: &#x27;error&#x27;, message: &#x27;Network error !!! Try again later !!!&#x27; })\n\n    &#x2F;&#x2F; 如果服务端有响应，显示响应的错误信息\n    if (error.response) {\n      Message({ type: &#x27;error&#x27;, message: &#x27;The authentication is invalid. Please login again.&#x27; })\n\n      &#x2F;&#x2F; 退出登录\n      switch (error.response.data.status_code) {\n        case 401:\n          setTimeout(() =&gt; {\n            store.dispatch(&#x27;logout&#x27;)\n            router.replace({\n              path: &#x27;&#x2F;login&#x27;,\n              query: {\n                redirect: router.currentRoute.fullPath\n              }\n            })\n          }, 1000)\n          break\n        case 404:\n          setTimeout(() =&gt; {\n            store.dispatch(&#x27;logout&#x27;)\n            router.replace({\n              path: &#x27;&#x2F;404&#x27;,\n              query: {\n                redirect: router.currentRoute.fullPath\n              }\n            })\n          }, 1000)\n          break\n        case 500:\n          Message({ type: &#x27;error&#x27;, message: &#x27;The Server is error, try again later !!!&#x27; })\n      }\n    }\n\n    return Promise.reject(error)\n  }\n)\n</code></pre><p>现在写法是 token 过期退出登录，但是业务需求要能刷新token，不太会写，有木有代码参看一下</p>\n</div>',title:"【axios】有木有刷新token的代码参考一下",last_reply_at:"2017-10-18T07:56:13.252Z",good:!1,top:!1,reply_count:2,visit_count:243,create_at:"2017-10-15T10:36:33.733Z",author:{loginname:"vxhly",avatar_url:"https://avatars0.githubusercontent.com/u/17906558?v=4&s=120"}},{id:"59c3352ee7d9a031127eadac",author_id:"5991c8c2f36051a45246bfcb",tab:"ask",content:'<div class="markdown-text"><p>像 phantom.js 之类的特征还是挺明显的，puppeteer 该怎么判断，是不是没特征跟 Chrome 完全一样，大家有没有什么思路？</p>\n</div>',title:"怎么反爬 puppeteer",last_reply_at:"2017-10-18T07:41:09.014Z",good:!1,top:!1,reply_count:5,visit_count:552,create_at:"2017-09-21T03:42:38.323Z",author:{loginname:"ianchn",avatar_url:"https://avatars3.githubusercontent.com/u/29963618?v=4&s=120"}},{id:"5459da613e1f39344c5b3a39",author_id:"504c28a2e2b845157708cb61",tab:"share",content:'<div class="markdown-text"><p>今天做个项目学到了一点，防盗链机制如果允许无 Referer 访问的话，是很容易绕过的。</p>\n<p>先说说防盗链的原理，http 协议中，如果从一个网页跳到另一个网页，http 头字段里面会带个 Referer。图片服务器通过检测 Referer 是否来自规定域名，来进行防盗链。</p>\n<p>如果盗用网站是 https 的 protocol，而图片链接是 http 的话，则从 https 向 http 发起的请求会因为安全性的规定，而不带 referer，从而实现防盗链的绕过。</p>\n<p>比如现在在 cnode 这里，由于我们启用了 https，所以任何 http 的图片几乎都可以直接贴过来并显示了。</p>\n<hr>\n<p>20150519 update\n现在我已经把出去的 https 也加上了 referer</p>\n</div>',title:"破解某些网站图片的防盗链",last_reply_at:"2017-10-18T06:39:00.816Z",good:!1,top:!1,reply_count:42,visit_count:21247,create_at:"2014-11-05T08:05:53.149Z",author:{loginname:"alsotang",avatar_url:"https://avatars1.githubusercontent.com/u/1147375?v=4&s=120"}},{id:"59e4cc83eab6a653687401d1",author_id:"5765441d02d0ee4b6d8a3e53",tab:"ask",content:'<div class="markdown-text"><p>由于前阵子自个玩的小服务器重装了，今天打算把之前在服务器上有个是基于eggjs（大概1.0版本吧）做的微信相关的项目迁移\n整改到eggjs 1.9版本上（这个项目是拿来练手的），过程也有对部分代码进行下整改，然后部署上线。</p>\n<p>测试微信授权的时候页面一直出现Invalid signature，刚开始误以为是微信签名或者参数错误之类的，一直排查这块的代码感觉没错，\n在本地测试也没问题，就是到线上出现症状，接下来一会把问题移到nginx这里，检查了下nginx配置等（服务器上架了层nginx做代理），对于它倒没太大的质疑。</p>\n<p>最后从eggjs启动加载配置进行追查，发现代码有误\n<img src="//dn-cnode.qbox.me/FuzQpO-0sGc6VM6hPFk8fygfPJ44" alt="屏幕快照 2017-10-16 下午10.58.10.png">\n正确的是\n<img src="//dn-cnode.qbox.me/FuGixDr-1eQT6KcQdp4uf_FMzs4A" alt="屏幕快照 2017-10-16 下午10.57.45.png"></p>\n<p>修改后一切正常！</p>\n<p>有点疑惑eggjs对于多余的不存在配置，既没有报错，也没有在一些日志或者其它地方能够捕捉到？\n还是小白在排除上或者使用上姿势不对。</p>\n</div>',title:"使用eggjs配置中出现多余不存在配置导致Invalid signature",last_reply_at:"2017-10-18T06:36:00.810Z",good:!1,top:!1,reply_count:3,visit_count:280,create_at:"2017-10-16T15:13:07.530Z",author:{loginname:"Mrlyjoutlook",avatar_url:"https://avatars3.githubusercontent.com/u/16191526?v=4&s=120"}},{id:"59e4b705bcfcc03162f2fef5",author_id:"590c2ed552c3650e042a7fd9",tab:"ask",content:'<div class="markdown-text"><p>背景：我在做CNode.js的基于ionic的客户端，在做为评论点赞的功能\nPOST请求：<a href="https://cnodejs.org/api/v1/topic/59d62dc5eab6a6536873fec8">https://cnodejs.org/api/v1/topic/59d62dc5eab6a6536873fec8</a>\n返回</p>\n<pre class="prettyprint language- &quot;replies&quot;: ["><code>            {\n                &quot;id&quot;: &quot;59d62de2eab6a6536873fec9&quot;,\n                &quot;author&quot;: {\n                    &quot;loginname&quot;: &quot;lazyopen&quot;,\n                    &quot;avatar_url&quot;: &quot;https:&#x2F;&#x2F;avatars1.githubusercontent.com&#x2F;u&#x2F;4491617?v=4&amp;s=120&quot;\n                },\n                &quot;content&quot;: &quot;&lt;div class=\\&quot;markdown-text\\&quot;&gt;&lt;p&gt;哈哈哈哈\\nFrom &lt;a href=\\&quot;https:&#x2F;&#x2F;github.com&#x2F;soliury&#x2F;noder-react-native\\&quot;&gt;Noder&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;\\n&lt;&#x2F;div&gt;&quot;,\n                &quot;ups&quot;: [\n                    &quot;590c2ed552c3650e042a7fd9&quot;\n                ],\n                &quot;create_at&quot;: &quot;2017-10-05T13:04:34.685Z&quot;,\n                &quot;reply_id&quot;: null,\n                &quot;is_uped&quot;: false\n            }...\n</code></pre><p>这里面的的ups数组应该是点赞的人的信息，然后我想问问这里面的<strong><em>590c2ed552c3650e042a7fd9</em></strong>怎么才能和我的token绑定，换句话说，在不提交新请求的情况下如何判断是否点赞?谢谢。\n另：这是我项目地址<a href="https://github.com/fattypiggy/CNode-ionic">GitHub传送门</a>，欢迎小伙伴们给我的项目提建议，欢迎PR，欢迎Star</p>\n</div>',title:"关于CNode.js为评论点赞的API问题",last_reply_at:"2017-10-18T06:35:40.686Z",good:!1,top:!1,reply_count:12,visit_count:383,create_at:"2017-10-16T13:41:25.003Z",author:{loginname:"fattypiggy",avatar_url:"https://avatars0.githubusercontent.com/u/17648041?v=4&s=120"}},{id:"55c9aedd36050aab16d39eb0",author_id:"552ba8cd77becc1a26fb7f74",tab:"ask",content:'<div class="markdown-text"><p>NPM 安装时每个依赖的包都重新复制了一份，导致一个小小的项目安装完依赖就占了几百M的空间，而且<code>node_modules/xxx/node_modules......</code> 路径太深，还不知道NPM有没有重复下载，不是一般无语，看有人提了 Issue 建议用 <code>node_modules/package@version</code> 这样扁平化的方式管理，减少重复文件，但官方竟然拒绝了，不知道他们脑子里想的什么。我印象中好像有提到说 NPM 新版将支持node_modules扁平化目录树，但没找到具体消息。</p>\n</div>',title:"NPM 会将 node_modules 依赖包扁平化吗？",last_reply_at:"2017-10-18T06:33:16.703Z",good:!1,top:!1,reply_count:10,visit_count:4808,create_at:"2015-08-11T08:14:21.507Z",author:{loginname:"JexCheng",avatar_url:"https://avatars3.githubusercontent.com/u/2967361?v=4&s=120"}},{id:"59e6cad07675e3bc36f77bd6",author_id:"581ffec9e90cfbec054d7710",tab:"share",content:'<div class="markdown-text"><p><img src="https://user-gold-cdn.xitu.io/2017/10/18/2af80d0cae6cad353f62554c02d34c7c?imageView2/1/w/1304/h/734/q/85/interlace/1" alt></p>\n<h2>简介</h2>\n<p>iView Admin 是基于 Vue.js，搭配使用 <a href="https://github.com/iview/iview">iView UI</a> 组件库形成的一套后台集成解决方案，由 TalkingData 前端可视化团队部分成员开发维护。iView Admin 遵守 iView 设计和开发约定，风格统一，设计考究，并且更多功能在不停开发中。</p>\n<p>没错，这就是大家期待已久的 admin 了，这么漂亮好用的系统，是不是可以给个 Star 鼓励一下开发者呢：\n<strong>iView GitHub：<a href="https://github.com/iview/iview">https://github.com/iview/iview</a></strong>\n<strong>iView Admin GitHub：<a href="https://github.com/iview/iview-admin">https://github.com/iview/iview-admin</a></strong></p>\n<h2>在线预览</h2>\n<p><a href="https://iview.github.io/iview-admin">在线访问地址 https://iview.github.io/iview-admin</a>\n密码随意填，但要记住哦（不然使用锁屏功能时你就懵逼了）。</p>\n<h2>功能</h2>\n<ul>\n<li>登录/登出</li>\n<li>权限管理\n<ul>\n<li>列表过滤</li>\n<li>权限切换</li>\n</ul>\n</li>\n<li>组件\n<ul>\n<li>富文本编辑器</li>\n<li>Markdown编辑器</li>\n<li>可拖拽列表</li>\n<li>文件上传</li>\n<li>数字渐变</li>\n</ul>\n</li>\n<li>表单编辑\n<ul>\n<li>文章发布</li>\n<li>工作流</li>\n</ul>\n</li>\n<li>表格\n<ul>\n<li>可拖拽排序</li>\n<li>可编辑表格\n<ul>\n<li>行内编辑</li>\n<li>单元格编辑</li>\n</ul>\n</li>\n<li>表格导出数据\n<ul>\n<li>导出为Csv文件</li>\n<li>导出为Xls文件</li>\n</ul>\n</li>\n<li>表格转图片</li>\n</ul>\n</li>\n<li>错误页面\n<ul>\n<li>401页面</li>\n<li>404页面</li>\n<li>500页面</li>\n</ul>\n</li>\n<li>换肤</li>\n<li>收缩侧边栏</li>\n<li>tag标签导航</li>\n<li>面包屑导航</li>\n<li>全屏/退出全屏</li>\n<li>锁屏</li>\n<li>消息中心</li>\n<li>个人中心</li>\n</ul>\n<h2>效果展示</h2>\n<ul>\n<li>\n<p>登录\n<img src="https://user-gold-cdn.xitu.io/2017/10/18/9732245161d82aca0bbd173896353e2f" alt="image"></p>\n</li>\n<li>\n<p>标签导航\n<img src="https://user-gold-cdn.xitu.io/2017/10/18/aee663c404b83727d0cfcfb3d595303e" alt="image"></p>\n</li>\n<li>\n<p>权限管理\n<img src="https://user-gold-cdn.xitu.io/2017/10/18/c5de141388278260b9f18527e22e07da" alt="image"></p>\n</li>\n<li>\n<p>可拖拽列表\n<img src="https://user-gold-cdn.xitu.io/2017/10/18/b09aff86584fa7fc5cddfeadaa8dd921" alt="image"></p>\n</li>\n<li>\n<p>文件上传\n<img src="https://user-gold-cdn.xitu.io/2017/10/18/554aec813ff501c3a8b1e55e6617a079" alt="image"></p>\n</li>\n<li>\n<p>数字渐变\n<img src="https://user-gold-cdn.xitu.io/2017/10/18/75fe00a39b111dc730090da770af6c69" alt="image"></p>\n</li>\n<li>\n<p>文章发布\n<img src="https://user-gold-cdn.xitu.io/2017/10/18/26d3e14fb613fd1fc3c5c326f18760b8" alt="image"></p>\n</li>\n<li>\n<p>工作流\n<img src="https://user-gold-cdn.xitu.io/2017/10/18/73cd91031f2fbefd15f50d8b14e93e61" alt="image"></p>\n</li>\n<li>\n<p>可拖拽表格\n<img src="https://user-gold-cdn.xitu.io/2017/10/18/5c67924b10dacae95da3027416600508" alt="image"></p>\n</li>\n<li>\n<p>可编辑表格\n<img src="https://user-gold-cdn.xitu.io/2017/10/18/cd056848d5007609e24822684520be86" alt="image"></p>\n</li>\n<li>\n<p>表格导出数据\n<img src="https://user-gold-cdn.xitu.io/2017/10/18/597d04f03abf3434a61fbf956dc70655" alt="image"></p>\n</li>\n<li>\n<p>表格转图片\n<img src="https://user-gold-cdn.xitu.io/2017/10/18/022c926b222785f08c239264c5def37f" alt="image"></p>\n</li>\n<li>\n<p>错误页面\n<img src="https://user-gold-cdn.xitu.io/2017/10/18/9c3743460bd777e15238dc70e5421eff" alt="image"></p>\n</li>\n<li>\n<p>锁屏\n<img src="https://user-gold-cdn.xitu.io/2017/10/18/41a4e21de90f9295b652b68b893713da" alt="image"></p>\n</li>\n<li>\n<p>可收缩侧边栏\n<img src="https://user-gold-cdn.xitu.io/2017/10/18/6146673b7deb41a3e24fc9648f8d8418" alt="image">s</p>\n</li>\n<li>\n<p>主题切换\n<img src="https://user-gold-cdn.xitu.io/2017/10/18/65d38c275a6a178a61c6cf21eb73af63" alt="image"></p>\n</li>\n<li>\n<p>消息中心\n<img src="https://user-gold-cdn.xitu.io/2017/10/18/fe84da0d6eaa939b823301c27106dc12" alt="image"></p>\n</li>\n</ul>\n<h2>文件结构</h2>\n<pre class="prettyprint language-shell"><code>.\n├── dist\n│   ├── langs    TinyMCE富文本编辑器语言包\n│   ├── plugins    TinyMCE富文本编辑器组件\n│   ├── skins    TinyMCE富文本编辑器皮肤\n│   └── themes    TinyMCE富文本编辑器主题\n└── src\n    ├── config    项目配置\n    ├── images    图片文件\n    ├── libs    工具方法\n    ├── styles    样式文件\n    ├── template    ejs模板\n    └── views    视图组件\n        ├── access    权限管理\n        ├── error_page    错误页面\n        ├── form    表单\n        │   ├── article-publish    文章发布\n        │   └── work-flow    工作流\n        ├── home    首页\n        ├── main_components    主框架\n        ├── message    消息中心\n        ├── my_components    组件\n        │   ├── count-to    数字渐变\n        │   ├── draggable-list    可拖拽列表\n        │   ├── file-upload    文件上传\n        │   ├── markdown-editor    markdown编辑器\n        │   └── text-editer    富文本编辑器\n        ├── own-space    个人中心\n        ├── screen-shorts    锁屏\n        └── tables    表格\n</code></pre><h2>Links</h2>\n<ul>\n<li><a href="https://github.com/TalkingData">TalkingData</a></li>\n<li><a href="https://github.com/iview/iview">iView</a></li>\n<li><a href="https://github.com/vuejs/vue">Vue</a></li>\n<li><a href="https://github.com/webpack/webpack">Webpack</a></li>\n</ul>\n<h2>License</h2>\n<p><a href="http://opensource.org/licenses/MIT">MIT</a></p>\n<p>Copyright © 2016-present, iView</p>\n</div>',title:"iView 发布后台管理系统 iview-admin，没错，它就是你想要的",last_reply_at:"2017-10-18T06:28:55.580Z",good:!1,top:!1,reply_count:3,visit_count:263,create_at:"2017-10-18T03:30:24.822Z",author:{loginname:"icarusion",avatar_url:"https://avatars2.githubusercontent.com/u/5370542?v=4&s=120"}},{id:"59e6be19eab6a65368740278",author_id:"59e6bd774e06a59435d07d20",tab:"ask",content:'<div class="markdown-text"><p>现在我想要做一个客户端输入一个人链接，然后得到这个链接的文件（不用下载），这个链接有可能跨域，有没有办法？</p>\n</div>',title:"js 跨域请求文件",last_reply_at:"2017-10-18T05:49:54.150Z",good:!1,top:!1,reply_count:2,visit_count:180,create_at:"2017-10-18T02:36:09.679Z",author:{loginname:"fengFanYong",avatar_url:"https://avatars0.githubusercontent.com/u/20026967?v=4&s=120"}},{id:"59e2bd86bcfcc03162f2fe40",author_id:"551f62159f883d8332bbf993",tab:"share",content:'<div class="markdown-text"><p><a href="http://45.77.178.72:3000/">在线测试地址</a>  （国外便宜的服务器，只是为了测试和预览，速度较慢）</p>\n<p><a href="https://github.com/yinyanlv/runner">源码地址</a></p>\n<p>欢迎大家提issue，fork等，该项目代码完全开源，你可以基于它搭建自己的社区论坛，:)</p>\n</div>',title:"用rust语言开发了一个社区论坛系统，界面风格参考了cnode，ruby china，支持pc端、手机端，完全开源",last_reply_at:"2017-10-18T05:17:56.439Z",good:!1,top:!1,reply_count:16,visit_count:682,create_at:"2017-10-15T01:44:38.251Z",author:{loginname:"bugong-Y",avatar_url:"https://avatars1.githubusercontent.com/u/10555534?v=4&s=120"}},{id:"59e48503eab6a6536874018f",author_id:"59dc8eeff7cc61fb67daaf1c",tab:"ask",content:'<div class="markdown-text"><p>我有个代码，定义了一个transform流来加密数据。如果将加密的数据直接存在本地，然后读取本地加密的文件，通过tcp发给客户端，客户端也定义了一个transform流来解密，这样是一切正常的。数据能正常解密。\n但是如果是服务器端直接加密输出给客户端，客户端就会收到重复的数据，而且重复数据块每次都不一样。非常的诡异。\n不知道是不是我对流的理解还有不足之处，希望能得到各位大牛的指点，谢谢。\n代码如下：</p>\n<p>服务器端代码：tcpserver.js</p>\n<pre class="prettyprint"><code>&#x27;use strict&#x27;;\nconst net = require(&#x27;net&#x27;);\nconst crypto = require(&#x27;crypto&#x27;);\nconst stream = require(&#x27;stream&#x27;);\n\nconst password = &#x27;123qweASD&#x27;;\n\nvar i = 1;\n\n&#x2F;**\n * Encrypts text by given key\n * @param Buffer text to encrypt\n * @param String masterkey\n * @returns String encrypted text, base64 encoded\n *&#x2F;\nfunction encipherGCM(buff, masterkey) {\n    try {\n        &#x2F;&#x2F; random initialization vector\n        var iv = crypto.randomBytes(12);\n\n        &#x2F;&#x2F; random salt\n        var salt = crypto.randomBytes(64);\n\n        &#x2F;&#x2F; derive key: 32 byte key length - in assumption the masterkey is a cryptographic and NOT a password there is no need for\n        &#x2F;&#x2F; a large number of iterations. It may can replaced by HKDF\n        var key = crypto.pbkdf2Sync(new Buffer(masterkey), salt, 2145, 32, &#x27;sha512&#x27;);\n\n        &#x2F;&#x2F; AES 256 GCM Mode\n        var cipher = crypto.createCipheriv(&#x27;aes-256-gcm&#x27;, key, iv);\n\n        &#x2F;&#x2F; encrypt the given buffer\n        var encrypted = Buffer.concat([cipher.update(buff), cipher.final()]);\n\n        &#x2F;&#x2F; extract the auth tag\n        var tag = cipher.getAuthTag();\n\n        &#x2F;&#x2F; generate output\n        return Buffer.concat([salt, iv, tag, encrypted]);\n\n    } catch (e) {\n    }\n\n    &#x2F;&#x2F; error\n    return null;\n}\n\nconst Encodetransform = stream.Transform({\n    highWaterMark: 128 * 1024,\n    transform: function (buf, enc, next) {\n        process.nextTick(() =&gt; {\n            var encode_buff = encipherGCM(buf, password);\n            var buff_len = new Buffer(4);\n            buff_len.writeUInt32BE(encode_buff.length);\n            var encode_buff_head = Buffer.concat([buff_len, encode_buff]);\n\n            var md5 = crypto.createHash(&#x27;md5&#x27;);\n            var md5_code = md5.update(buf).digest(&#x27;hex&#x27;);\n\n            console.log(i++, &#x27;buf&#x27;, buf.length, &#x27;encode_buff_head&#x27;, encode_buff_head.length, &#x27;md5&#x27;, md5_code);\n            next(null, encode_buff_head);\n        });\n    }\n})\n\n\nvar server = net.createServer((clientSocket) =&gt; {\n    i = 1;\n    var rs = require(&#x27;fs&#x27;).createReadStream(&#x27;.&#x2F;test.jpg&#x27;)\n    rs.pipe(Encodetransform).pipe(clientSocket);\n});\n\n\nserver.listen(6000, &#x27;0.0.0.0&#x27;, () =&gt; {\n    console.log(&#x27;Listening on 6000...&#x27;);\n});\n</code></pre><p>客户端代码：client.js</p>\n<pre class="prettyprint"><code>&#x27;use strict&#x27;\nconst net = require(&#x27;net&#x27;);\nconst crypto = require(&#x27;crypto&#x27;);\nconst stream = require(&#x27;stream&#x27;);\nconst fs = require(&#x27;fs&#x27;);\n\nconst password = &#x27;123qweASD&#x27;;\n\nconst ws = fs.createWriteStream(&#x27;.&#x2F;test_Deciphered.jpg&#x27;);\n\n&#x2F;**\n * Decrypts text by given key\n * @param Buffer base64 encoded input data\n * @param String masterkey\n * @returns Buffer decrypted (original) text\n *&#x2F;\nfunction decipherGCM(data, masterkey) {\n\n    var bData = data;\n\n    &#x2F;&#x2F; convert data to buffers\n    var salt = bData.slice(0, 64);\n    var iv = bData.slice(64, 76);\n    var tag = bData.slice(76, 92);\n    var buff = bData.slice(92);\n    try {\n        &#x2F;&#x2F; derive key using; 32 byte key length\n        var key = crypto.pbkdf2Sync(new Buffer(masterkey), salt, 2145, 32, &#x27;sha512&#x27;);\n\n        &#x2F;&#x2F; AES 256 GCM Mode\n        var decipher = crypto.createDecipheriv(&#x27;aes-256-gcm&#x27;, key, iv);\n        decipher.setAuthTag(tag);\n\n        &#x2F;&#x2F; encrypt the given buffer\n        var decrypted = Buffer.concat([decipher.update(buff), decipher.final()]);\n\n        return decrypted;\n\n    } catch (e) {\n    }\n\n    &#x2F;&#x2F; error\n    return null;\n}\n\n\nvar c = 0, i = 1;\n\nconst Transform = stream.Transform;\nclass DecryptStream extends Transform {\n    constructor() {\n        super();\n        this.highWaterMark = 2;\n        this._isRemain = false;&#x2F;&#x2F;有没有遗留数据\n        this._remainBuff = new Buffer(0);&#x2F;&#x2F;上次遗留的数据\n    }\n\n    _transform(buf, enc, next) {\n        process.nextTick(() =&gt; {\n            var self = this;\n            var currectBuffer;\n            &#x2F;&#x2F;console.log(buf.length);\n            if (!this._isRemain) {&#x2F;&#x2F;如果没有待处理数据\n                currectBuffer = buf;\n            }\n            else {&#x2F;&#x2F;如果有待处理数据\n                this._remainBuff = Buffer.concat([this._remainBuff, buf]);&#x2F;&#x2F;将待处理数据和这次的数据拼接\n                currectBuffer = this._remainBuff;\n            }\n            while (currectBuffer.length &gt; 0) {\n                var buff_len = currectBuffer.slice(0, 4);\n                var len = buff_len.readUInt32BE(0);\n                if (currectBuffer.length &lt; len + 4) {&#x2F;&#x2F;如果当前数据块不完整\n                    this._isRemain = true;\n                    this._remainBuff = currectBuffer;&#x2F;&#x2F;将这部分数据存入待处理数据\n                    currectBuffer = new Buffer(0);\n                }\n                else {\n                    var data = currectBuffer.slice(4, len + 4);&#x2F;&#x2F;取出一块数据,slice第二个参数是索引值\n                    var decrypted_data = decipherGCM(data, password);&#x2F;&#x2F;解密\n                    if (decrypted_data === null)\n                        console.log(&#x27;Decrypto Error!&#x27;);\n                    var md5 = crypto.createHash(&#x27;md5&#x27;);\n                    var md5_code = md5.update(decrypted_data).digest(&#x27;hex&#x27;);\n                    console.log(i++, &#x27;decrypted_data&#x27;, decrypted_data.length, &#x27;md5&#x27;, md5_code);\n\n                    this.push(decrypted_data);&#x2F;&#x2F;push出去\n                    var next_data = currectBuffer.slice(len + 4);&#x2F;&#x2F;获取剩下的数据\n                    currectBuffer = next_data;\n                }\n            }\n            next();\n        });\n    }\n}\n\nnet.connect(6000, &#x27;127.0.0.1&#x27;, function () {\n    var server = this;\n    var decryptStream = new DecryptStream();\n    server.pipe(decryptStream).pipe(ws);\n});\n</code></pre></div>',title:"百思不得其解，关于transform流收到重复数据的问题",last_reply_at:"2017-10-18T02:43:44.072Z",good:!1,top:!1,reply_count:7,visit_count:352,create_at:"2017-10-16T10:08:03.729Z",author:{loginname:"lersh",avatar_url:"https://avatars3.githubusercontent.com/u/2350206?v=4&s=120"}},{id:"59e03828eab6a653687400ac",author_id:"55f7f53320d84f3d37758273",tab:"ask",content:'<div class="markdown-text"><p><code>dgram</code> 是不可靠，有没有现成的可靠的UDP库呢？</p>\n</div>',title:"Node.js有没有什么可靠的UDP库吗？",last_reply_at:"2017-10-18T02:25:47.231Z",good:!1,top:!1,reply_count:5,visit_count:463,create_at:"2017-10-13T03:51:04.028Z",author:{loginname:"imhered",avatar_url:"https://avatars1.githubusercontent.com/u/12947399?v=4&s=120"}}]}},F4DB:function(t,e,n){"use strict";var o=n("Qx7a"),a=n("qXTj"),i=n("46Yf"),s=i(o.a,a.a,!1,null,null,null);e.a=s.exports},LyNo:function(t,e,n){"use strict";var o=n("F4DB"),a=n("XGw7");e.a={name:"First",data:function(){return{pages:null,curr_page:1,prev_page:!0,next_page:!1,tab:"all"}},props:["articles"],methods:{jump:function(t){"number"==typeof t&&(this.curr_page=t)}},mounted:function(){this.pages=a.a.makepage(this.curr_page,this.tab)},watch:{curr_page:function(){1===this.curr_page?this.prev_page=!0:this.prev_page=!1,this.pages=a.a.makepage(this.curr_page,this.tab),this.$emit("update_page","/?tab="+this.tab+"&page="+this.curr_page)},tab:function(){}},components:{PageList:o.a}}},NHnr:function(t,e,n){"use strict";function o(t){var e=JSON.parse(t);l.article_list=e.data}Object.defineProperty(e,"__esModule",{value:!0});var a=n("MVSX"),i=n("uYgi"),s=(n("YaEn"),n("XGw7")),r=(n("2laD"),s.a.doajax);a.a.config.productionTip=!1;var l=new a.a({el:"#app",data:{article_list:null,topics:"https://cnodejs.org/api/v1/topics"},methods:{fresh:function(t){r(this.topics+t).then(o),$(window).scrollTop(0)}},template:'<First :articles="article_list" @update_page="fresh"/>',components:{First:i.a}});r("https://cnodejs.org/api/v1/topics").then(o).catch(function(t){console.log(t)})},Qx7a:function(t,e,n){"use strict";var o=n("XGw7");e.a={name:"PageList",data:function(){return{msg:"this is title in component PageList.Vue",source_api:null}},props:["articles"],methods:{reply_time:o.a.getTime}}},"R9B+":function(t,e,n){"use strict";var o=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"hello"},[n("h1",[t._v(t._s(t.msg))]),t._v(" "),n("h2",[t._v("Essential Links")]),t._v(" "),t._m(0),t._v(" "),n("h2",[t._v("Ecosystem")]),t._v(" "),t._m(1)])},a=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[n("a",{attrs:{href:"https://vuejs.org",target:"_blank"}},[t._v("Core Docs")])]),t._v(" "),n("li",[n("a",{attrs:{href:"https://forum.vuejs.org",target:"_blank"}},[t._v("Forum")])]),t._v(" "),n("li",[n("a",{attrs:{href:"https://chat.vuejs.org",target:"_blank"}},[t._v("Community Chat")])]),t._v(" "),n("li",[n("a",{attrs:{href:"https://twitter.com/vuejs",target:"_blank"}},[t._v("Twitter")])]),t._v(" "),n("br"),t._v(" "),n("li",[n("a",{attrs:{href:"http://vuejs-templates.github.io/webpack/",target:"_blank"}},[t._v("Docs for This Template")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[n("a",{attrs:{href:"http://router.vuejs.org/",target:"_blank"}},[t._v("vue-router")])]),t._v(" "),n("li",[n("a",{attrs:{href:"http://vuex.vuejs.org/",target:"_blank"}},[t._v("vuex")])]),t._v(" "),n("li",[n("a",{attrs:{href:"http://vue-loader.vuejs.org/",target:"_blank"}},[t._v("vue-loader")])]),t._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/vuejs/awesome-vue",target:"_blank"}},[t._v("awesome-vue")])])])}],i={render:o,staticRenderFns:a};e.a=i},SVnR:function(t,e,n){"use strict";var o=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[t._m(0),t._v(" "),n("div",{staticClass:"main"},[n("div",{staticClass:"container"},[n("div",{staticClass:"col-md-9"},[t._m(1),t._v(" "),n("div",{attrs:{id:"app"}},[n("PageList",{attrs:{articles:t.articles}}),t._v(" "),n("ul",{staticClass:"pagination",attrs:{id:"pager"}},[n("li",{class:{disabled:t.prev_page}},[n("a",{attrs:{href:"/?page=1"},on:{click:function(e){e.preventDefault(),t.jump(1)}}},[n("span",[t._v("«")])])]),t._v(" "),t._l(t.pages,function(e){return n("li",{key:e.id,class:{disabled:t.curr_page===e.index},on:{click:function(n){n.preventDefault(),t.jump(e.index)}}},[n("a",{attrs:{href:e.page_path}},[t._v(t._s(e.index))])])}),t._v(" "),n("li",{class:{disabled:t.next_page}},[n("a",{attrs:{href:t.next_page}},[n("span",[t._v("»")])])])],2)],1)]),t._v(" "),t._m(2)])])])},a=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"header",attrs:{id:"top"}},[n("div",{staticClass:"navbar-inverse small"},[n("div",{staticClass:"container"},[n("div",{staticClass:"navbar-header"},[n("a",{staticClass:"navbar-brand",attrs:{href:"#"}},[n("img",{staticStyle:{height:"28px","margin-top":"-8px"},attrs:{src:"https://o4j806krb.qnssl.com/public/images/cnodejs_light.svg",alt:""}})])]),t._v(" "),n("form",{staticClass:"navbar-form navbar-left"},[n("div",{staticClass:"form-group"},[n("div",{staticClass:"input-group"},[n("input",{staticClass:"form-control",attrs:{type:"text"}}),t._v(" "),n("span",{staticClass:"input-group-btn"},[n("button",{staticClass:"btn btn-default"},[t._v("搜")])])])])]),t._v(" "),n("div",{staticClass:"nav navbar-nav navbar-right"},[n("li",[n("a",{attrs:{href:"#"}},[t._v("首页")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#"}},[t._v("未读消息")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#"}},[t._v("新手入门")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#"}},[t._v("api")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#"}},[t._v("关于")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#"}},[t._v("设置")])]),t._v(" "),n("li",[n("a",{attrs:{href:"#"}},[t._v("退出")])])])])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"nav nav-pills",attrs:{id:"menuBar"}},[n("li",{staticClass:"white-color"},[n("a",{attrs:{href:"/?tab=all"}},[t._v("全部")])]),t._v(" "),n("li",[n("a",{attrs:{href:"/?tab=good"}},[t._v("精华")])]),t._v(" "),n("li",[n("a",{attrs:{href:"/?tab=share"}},[t._v("分享")])]),t._v(" "),n("li",[n("a",{attrs:{href:"/?tab=ask"}},[t._v("问答")])]),t._v(" "),n("li",[n("a",{attrs:{href:"/?tab=job"}},[t._v("招聘")])]),t._v(" "),n("li",[n("a",{attrs:{href:"/?tab=dev"}},[t._v("客户端测试")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"col-md-3"},[n("div",{staticClass:"sideBar"},[n("div",{staticClass:"panel panel-default"},[n("div",{staticClass:"panel-heading"},[t._v("\r\n                            jssss\r\n                        ")]),t._v(" "),n("div",{staticClass:"panel-body"},[t._v("\r\n                            skkk\r\n                        ")])])])])}],i={render:o,staticRenderFns:a};e.a=i},XGw7:function(t,e,n){"use strict";function o(t){var e=new Date,n=new Date(t),o=e-n;return o/1e3<=60?Math.round(o/1e3)+" 秒前":o/1e3/60<60?Math.round(o/1e3/60)+"分钟前":o/1e3/60/60<24?Math.round(o/1e3/60/60)+"小时前":o/1e3/60/60/24<30?Math.round(o/1e3/60/60/24)+"天前":o/1e3/60/60/24/30<12?Math.round(o/1e3/60/60/24/30)+"个月前":Math.round(o/1e3/60/60/24/30/12)+"年前"}function a(t,e){var n=[];if(t<=3){for(var o=1;o<6;o++)t===o?n.push({index:o,page_path:""}):n.push({index:o,page_path:"/?tab="+e+"&page="+o});n.push({index:"...",page_path:""})}else if(t>3)for(var o=t-3;o<=t+3;o++)t-3===o||t+3===o?n.push({index:"...",page_path:""}):t===o?n.push({index:o,page_path:""}):n.push({index:o,page_path:"/?tab="+e+"&page="+o});return n}function i(t){var e={},n=t.split("?")[1],o=n.split("&"),a=!0,i=!1,s=void 0;try{for(var r,l=d()(o);!(a=(r=l.next()).done);a=!0){var c=r.value;c=c.split("="),e[c[0]]=c[1]}}catch(t){i=!0,s=t}finally{try{!a&&l.return&&l.return()}finally{if(i)throw s}}return e}function s(t){return new l.a(function(e,n){var o=new XMLHttpRequest;o.open("get",t,!0),o.send(null),o.onreadystatechange=function(){4===o.readyState&&(200===o.status?e(o.response):n(o.status))}})}var r=n("rVsN"),l=n.n(r),c=n("HzJ8"),d=n.n(c);e.a={getTime:o,makepage:a,solvekey:i,doajax:s}},YaEn:function(t,e,n){"use strict";var o=n("MVSX"),a=n("zO6J"),i=(n("gORT"),n("F4DB"));o.a.use(a.a);new a.a({routes:[{path:"/",name:"Hello",component:i.a}]})},YjOo:function(t,e){},gORT:function(t,e,n){"use strict";function o(t){n("YjOo")}var a=n("n3US"),i=n("R9B+"),s=n("46Yf"),r=o,l=s(a.a,i.a,!1,r,"data-v-3e69db19",null);l.exports},n3US:function(t,e,n){"use strict";e.a={name:"HelloWorld",data:function(){return{msg:"Welcome to Your Vue.js App"}}}},qXTj:function(t,e,n){"use strict";var o=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("ul",{staticClass:"list-group"},t._l(t.articles,function(e){return n("li",{key:e.id,staticClass:"list-group-item"},[n("a",{staticClass:"user_avatar",attrs:{href:t.source_api+"/user/"+e.author.loginname}},[n("img",{attrs:{src:e.author.avatar_url,alt:""}})]),t._v(" "),n("span",{staticClass:"reply_count"},[n("span",{staticClass:"count_of_replies",attrs:{title:"评论数"}},[t._v("\n                    "+t._s(e.reply_count)+"\n                ")]),t._v(" "),n("span",[t._v("/")]),t._v(" "),n("span",{staticClass:"count_of_visits",attrs:{title:"点击数"}},[t._v(t._s(e.visit_count))])]),t._v(" "),e.top?n("span",{staticClass:"share"},[t._v("置顶")]):"share"===e.tab?n("span",{staticClass:"share"},[t._v("分享")]):"ask"===e.tab?n("span",{staticClass:"share gray"},[t._v("问答")]):n("span",{}),t._v(" "),n("a",{staticClass:"title",attrs:{href:t.source_api+"/topic/"+e.id}},[t._v(t._s(e.title))]),t._v(" "),n("a",{staticClass:"last_time pull-right clearfix",attrs:{href:"#"}},[n("span",{staticClass:"last_reply_time"},[t._v(t._s(t.reply_time(e.last_reply_at)))])])])}))])},a=[],i={render:o,staticRenderFns:a};e.a=i},uYgi:function(t,e,n){"use strict";var o=n("LyNo"),a=n("SVnR"),i=n("46Yf"),s=i(o.a,a.a,!1,null,null,null);e.a=s.exports}},["NHnr"]);
//# sourceMappingURL=app.69b325648350b4cb9719.js.map